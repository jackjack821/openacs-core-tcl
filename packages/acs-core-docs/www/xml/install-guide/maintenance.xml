<sect1 id="maintenance-web">
  <title>Hosting Web Sites</title>
    
    <authorblurb>
      by <ulink url="mailto:joel@aufrecht.org">Joel Aufrecht</ulink>
    </authorblurb>
    
    <para>Maintenance tasks, optional software, and alternate configurations for AOLserver.</para>
    
    <sect2 id="install-openacs-keepalive" xreflabel="Keep AOLServer alive">
      <para>Assuming AOLserver started cleanly in the previous step, we'll set it up so that it's always running, and automatically restarts whenever it dies or is stopped.  This step is strongly recommended, even for development sites, because it makes install and maintenance much simpler.  </para>
      
      <para>The Reference Platform uses Daemontools to control AOLserver.  A simpler method, using <computeroutput>init</computeroutput>, is <link linkend="install-openacs-inittab">here</link>.</para>
      <orderedlist>
        <listitem>
          <para>Daemontools must already be installed.  If not, <link linkend="install-daemontools">install it</link>.</para>
        </listitem>
          <listitem>
            <para>Each service controlled by daemontools must have a directory in <computeroutput>/service</computeroutput>.  That directory must have a file called <computeroutput>run</computeroutput>.  Daemontools then creates additional files and directories to track status and log.  Create the appropriate directory as <computeroutput>/web/<replaceable>service0</replaceable>/etc/daemontools</computeroutput>, copy the prepared <computeroutput>run</computeroutput> file, and set permissions.  If your server is not called <replaceable>service0</replaceable>, edit <computeroutput>/web/<replaceable>service0</replaceable>/etc/run accordingly.</computeroutput></para>
        <screen>[service0@yourserver log]$ <userinput>cd /web/<replaceable>service0</replaceable>/etc</userinput>
[service0@yourserver etc]$ <userinput>mkdir daemontools</userinput>
[service0@yourserver etc]$ <userinput>cp /web/<replaceable>service0</replaceable>/packages/acs-core-docs/www/files/run.txt daemontools/run</userinput>
[service0@yourserver etc]$ <userinput>chmod 700 daemontools/run</userinput>
<action>cd /web/<replaceable>service0</replaceable>/etc
mkdir daemontools
cp /web/<replaceable>service0</replaceable>/packages/acs-core-docs/www/files/run.txt daemontools/run
chmod 700 daemontools/run</action></screen>
          </listitem>
          <listitem>
            <para>Kill any existing AOLserver instances.  As root, link the <computeroutput>daemontools</computeroutput> directory into the <computeroutput>/service</computeroutput> directory.  Daemontools' <computeroutput>svscan</computeroutput> process checks this directory every five seconds, and will quickly execute <computeroutput>run</computeroutput>.</para>
            
            <screen>[service0@yourserver etc]$ <userinput>killall nsd</userinput>
nsd: no process killed
[service0@yourserver etc]$ <userinput>exit</userinput>

[root@yourserver root]# <userinput>ln -s /web/<replaceable>service0</replaceable>/etc/daemontools/ /service/<replaceable>service0</replaceable></userinput></screen>
            <para>Verify that AOLserver is running.</para>
            <screen>[root@yourserver root]#<userinput> ps -auxw | grep nsd</userinput>
<replaceable>service0</replaceable>   5562 14.2  6.2 22436 15952 ?       S    11:55   0:04 /usr/local/aolserver/bin/nsd -it /web/<replaceable>service0</replaceable>/etc/config.tcl -u serve
root      5582  0.0  0.2  3276  628 pts/0    S    11:55   0:00 grep nsd
[root@yourserver root]#</screen>
          </listitem>
          <listitem>
            <para>The user <replaceable>service0</replaceable> can now control the service <replaceable>service0</replaceable> with these commands:</para>
            <itemizedlist>
              <listitem><para>

            <computeroutput>svc -d /service/<replaceable>service0</replaceable></computeroutput> -
            Bring the server down

          </para></listitem>
              
              <listitem><para>

            <computeroutput>svc -u /service/<replaceable>service0</replaceable></computeroutput> -
            Start the server up and leave it in keepalive mode.

          </para></listitem>
              
              <listitem><para>

            <computeroutput>svc -o /service/<replaceable>service0</replaceable></computeroutput> -
            Start the server up once. Do not restart it if it stops.

          </para></listitem>

        <listitem><para>

            <computeroutput>svc -t /service/<replaceable>service0</replaceable></computeroutput> -
            Stop and immediately restart the server.

          </para></listitem>

        <listitem><para>
        
            <computeroutput>svc -k /service/<replaceable>service0</replaceable></computeroutput> -
            Sends the server a KILL signal. This is like KILL -9. AOLserver
            exits immediately. If svc -t fails to fully kill AOLserver, use
            this option.  This does not take the server out of keepalive mode, so it should still bounce back up immediately.

          </para></listitem>
        </itemizedlist>
      </listitem>

        <listitem>
          <para>Install a script to automate the stopping and starting
          of aolserver services via daemontools.  You can then restart a service via <computeroutput>restart-aolserver <replaceable>service0</replaceable></computeroutput></para>
          <screen>[root@yourserver root]# <userinput>cp /web/<replaceable>service0</replaceable>/packages/acs-core-docs/www/files/restart-aolserver-daemontools.txt /usr/local/bin/restart-aolserver</userinput>
[root@yourserver root]# <userinput>chmod 755 /usr/local/bin/restart-aolserver</userinput>
[root@yourserver root]#</screen>
        </listitem>
      <listitem>
        <para>
        At this point, these commands will work only for the
        <computeroutput>root</computeroutput> user.  Grant permission for the <computeroutput>web</computeroutput> group to use <computeroutput>svc</computeroutput> commands on the <emphasis><replaceable>service0</replaceable></emphasis> server.</para>
            <screen>[root@yourserver root]# <userinput>svgroup web /service/<replaceable>service0</replaceable></userinput>
[root@yourserver root]#</screen>
          </listitem>
          <listitem>
            <para>Verify that the controls work.  You may want to <computeroutput>tail -f /web/<replaceable>service0</replaceable>/log/<replaceable>service0</replaceable>-error.log</computeroutput> in another window, so you can see what happens when you type these commands.
      </para>
            <para>

        Most of this information comes from Tom Jackson's <ulink
          url="http://zmbh.com/daemontools-aolserver/aolserver+daemontools.html">AOLServer+Daemontools
          Mini-HOWTO</ulink>.
</para>
        </listitem>
      </orderedlist>
    </sect2>
    <sect2 id="install-openacs-inittab" xreflabel="Editing inittab">
      <title>AOLserver keepalive with inittab</title>
      
      <para>This is an alternative method for keeping the AOLserver
		process running.  The recommended method is to <link
		linkend="install-openacs-keepalive">run AOLserver
		supervised</link>.</para>
      
      <para>
		This step should be completed as root. This can break every service
		on your machine, so proceed with caution.
	  </para>
      
      <itemizedlist>
        <listitem><para>
			There are 2 general steps to getting this working. 
		  </para>
          <orderedlist>
            <listitem><para> 
				Install a script called
				<computeroutput>restart-aolserver</computeroutput>. This
				script doesn't actually restart AOLserver - it just kills
				it.  
			  </para></listitem>
            
            <listitem><para>
				Ask the OS to restart our service whenever it's not
				running. We do this by adding a line to
				<computeroutput>/etc/inittab</computeroutput>.
			  </para></listitem>
          </orderedlist>
          
          <para>
			Calling <computeroutput>restart-aolserver</computeroutput>
			kills our service. The OS notices that our service is not
			running, so it automatically restarts it. Thus, calling
			<computeroutput>restart-aolserver</computeroutput> effectively
			restarts our service.  
		  </para></listitem>
        
		<listitem><para> 
			Copy this <ulink
			  url="files/restart-aolserver.txt">file</ulink> into
			<computeroutput>/tmp/restart-aolserver.txt</computeroutput>.
		  </para></listitem>

		<listitem><para> 
			This script needs to be SUID-root, which means
			that the script will run as root. This is necessary to ensure
			that the AOLserver processes are killed regardless of who owns
			them. However the script should be executable by the
			<computeroutput>web</computeroutput> group to ensure that the
			users updating the web page can use the script, but that
			general system users cannot run the script. You also need to
			have Perl installed and also a symbolic link to it in
			<computeroutput>/usr/local/bin</computeroutput>. 
		  </para>
		<programlisting>
joeuser:~$ su - 
Password: ***********
root:~# cp /tmp/restart-aolserver.txt /usr/local/bin/restart-aolserver
root:~# chown root.web /usr/local/bin/restart-aolserver
root:~# chmod 4750 /usr/local/bin/restart-aolserver
root:~# ln -s /usr/bin/perl /usr/local/bin/perl
root:~# exit</programlisting>
      </listitem>

      <listitem><para> 
			Test the <computeroutput>restart-aolserver</computeroutput>
			script. We'll first kill all running servers to clean the
			slate. Then, we'll start one server and use
			<computeroutput>restart-aolserver</computeroutput> to kill
			it. If it works, then there should be no more servers
			running. You should see the following lines. </para>

		<programlisting>
joeuser:~$ killall nsd
nsd: no process killed
joeuser:~$ /usr/local/aolserver/bin/nsd-postgres -t ~/web/<emphasis>birdnotes</emphasis>/nsd.tcl
joeuser:~$ restart-aolserver <emphasis>birdnotes</emphasis>
Killing 23727 
joeuser:~$ killall nsd
nsd: no process killed</programlisting>

        <para>
            The number 23727 indicates the process id(s) (PIDs) of the
            processes being killed. It is important that <emphasis
            role="strong">no processes are killed</emphasis> by the second
            call to <computeroutput>killall</computeroutput>. If there are
            processes being killed, it means that the script is not
            working.</para></listitem>

      <listitem><para> 
          Assuming that the <computeroutput>restart-aolserver</computeroutput>
          script worked, login as root and open
          <computeroutput>/etc/inittab</computeroutput> for
          editing. </para>
        <programlisting>
joeuser:~$ su -
Password: ************
root:~# emacs -nw /etc/inittab</programlisting>
      </listitem>

      <listitem><para> 
            Copy this line into the bottom of the file as a template,
            making sure that the first field
            <computeroutput>nss1</computeroutput> is unique.
          </para>
          <programlisting>
nss1:345:respawn:/usr/local/aolserver/bin/nsd-postgres -i -u nobody -g web -t /home/<emphasis>joeuser</emphasis>/web/<emphasis>birdnotes</emphasis>/nsd.tcl</programlisting>
        </listitem>

        <listitem><para>
            <emphasis role="strong">Important:</emphasis> Make sure there is a
            newline at the end of the file. If there is not a newline at
            the end of the file, the system may suffer catastrophic
            failures.  
          </para></listitem>

        <listitem><para>
            Still as root, enter the following command to re-initialize
            <computeroutput>/etc/inittab</computeroutput>. </para>

          <programlisting>
root:~# killall nsd    
nsd: no process killed
root:~# /sbin/init q</programlisting>        
        </listitem>

        <listitem><para> 
            See if it worked by running the
            <computeroutput>restart-aolserver</computeroutput> script
            again. </para>

          <programlisting>
root:~# restart-aolserver <emphasis>birdnotes</emphasis>
Killing 23750</programlisting>
        </listitem>
      </itemizedlist>

      <para>
        If processes were killed, congratulations, your server is now
        automated for startup and shutdown. 
      </para>
    </sect2>
  
  
  <sect2 id="install-openacs-port80">
    <title>Running AOLserver on Port 80</title>
    <para>If you want your webserver to be <computeroutput>http://yourserver.com</computeroutput>, it must run on port 80, the default HTTP port.  You set this in the <computeroutput>config.tcl</computeroutput> file.  You will need to start the service as
      <computeroutput>root</computeroutput>. If you follow the instructions
      above for <link linkend="install-openacs-keepalive">automating
      startup</link>, this will be taken care of, but if you ever start the
      server from the command line, be sure to <computeroutput>su
      -</computeroutput> first.
    </para>

    <para>
      Port 80 is a <emphasis>privileged</emphasis> port. Only certain users
      can claim it. When you start <computeroutput>nsd</computeroutput> as
      root, it obtains the port, and then changes to run as whatever user
      you specify in the server configuration file. This ensures a high
      level of security, as the server, once started, is not running as
      <computeroutput>root</computeroutput>. This mean that if someone was
      able to exploit your web server to execute a command on your server,
      they would not be able to gain <computeroutput>root</computeroutput>
      access.</para>
  </sect2>

  <sect2 id="install-next-add-server">
    <title>Running multiple services on one machine</title>
      <formalpara>
        <title>Services on different ports</title>
        <para>To run a different service on another port but the same
        ip, simply repeat <xref linkend="openacs"/> replacing
        <replaceable>service0</replaceable>, and change the
<programlisting>set httpport              8000
set httpsport             8443 </programlisting>
 to different values.</para>
      </formalpara>
      <formalpara>
        <title>Services on different host names</title>
        <para>For example, suppose you want to support
<computeroutput>http://foo.com</computeroutput> and
    <computeroutput>http://bar.com</computeroutput> on the same
    machine.  The easiest way is to assign each one a different ip
    address.  Then you can install two services as above, but with
        different values for
<programlisting>set hostname               [ns_info hostname]
set address                127.0.0.1 </programlisting>
</para>
    <para>If you want to install two services with different host
    names sharing the same ip, you'll need nsvhr to redirect requests
    based on the contents of the tcp headers.  See <ulink
    url="http://borkware.com/rants/aolserver-vhosting/">AOLserver
    Virtual Hosting with TCP</ulink> by <ulink url="mailto:markd@borkware.com">markd</ulink>.
</para>
  </formalpara>
  </sect2>

    <sect2 id="install-ssl">
      <title>Installing SSL Support</title>
        <para>nsopenssl is an open-sounce module for Aolserver which
        adds support for the ssl encryption layer.  To use it, you
        must <link linkend="install-nsopenssl">install</link> the software, create or purchase certificates,
        and configure your OpenACS instance to use it.</para>
        <orderedlist>
          <listitem>
            <para>Uncomment this line from <computeroutput>config.tcl</computeroutput>.</para>
            <programlisting>#ns_param   nsopenssl       ${bindir}/nsopenssl.so
</programlisting>
          </listitem>
          <listitem id="ssl-certificates" linkref="Generate ssl certificates">
            <para>Prepare a certificate directory for the service.</para>
            <screen>[service0@yourserver etc]$ <userinput>mkdir /web/<replaceable>service0</replaceable>/etc/certs</userinput>
[service0@yourserver etc]$ <userinput>chmod 700 /web/<replaceable>service0</replaceable>/etc/certs</userinput>
[service0@yourserver etc]$ 
<action>mkdir /web/<replaceable>service0</replaceable>/etc/certs
chmod 700 /web/<replaceable>service0</replaceable>/etc/certs</action></screen>            
          </listitem>
          <listitem>
            <para>It takes two files to support an SSL connection.  The certificate is the public half of the key pair - the server sends the certificate to browser requesting ssl.  The key is the private half of the key pair.  In addition, the certificate must be signed by Certificate Authority or browsers will protest.  Each web browser ships with a built-in list of acceptable Certificate Authorities (CAs) and their keys.  Only a site certificate signed by a known and approved CA will work smoothly.  Any other certificate will cause browsers to produce some messages or block the site.  Unfortunately, getting a site certificate signed by a CA costs money.  In this section, we'll generate an unsigned certificate which will work in most browsers, albeit with pop-up messages.</para>
            <para>Use an OpenSSL perl script to generate a certificate and key.</para>
            <screen>[service0@yourserver service0]$ <userinput>cd /web/service0/etc/certs</userinput>
[service0@yourserver certs]$ <userinput>perl /usr/share/ssl/misc/CA -newcert</userinput>
Using configuration from /usr/share/ssl/openssl.cnf
Generating a 1024 bit RSA private key
...++++++
.......++++++
writing new private key to 'newreq.pem'
Enter PEM pass phrase:</screen>
            <para>Enter a pass phrase for the CA certificate.  Then, answer the rest of the questions.  At the end you should see this:</para>
        <screen>Certificate (and private key) is in newreq.pem
[service0@yourserver certs]$</screen>
        <para><computeroutput>newreq.pem</computeroutput> contains our certificate and private key.  The key is protected by a passphrase, which means that we'll have to enter the pass phrase each time the server starts.  This is impractical and unnecessary, so we create an unprotected version of the key.  <emphasis>Security implication</emphasis>: if anyone gets access to the file keyfile.pem, they effectively own the key as much as you do.  Mitigation: don't use this key/cert combo for anything besides providing ssl for the web site.</para>
            <screen>[root@yourserver misc]# <userinput>openssl rsa -in newreq.pem -out keyfile.pem</userinput>
read RSA key
Enter PEM pass phrase:
writing RSA key
[service0@yourserver certs]$ </screen>
        <para>To create the certificate file, we take the combined file, copy it, and strip out the key.</para>
        <screen>[service0@yourserver certs]$ <userinput>cp newreq.pem certfile.pem</userinput>
[root@yourserver misc]# <userinput>emacs certfile.pem</userinput></screen>
        <para>Strip out the section that looks like</para>
        <programlisting>-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,F3EDE7CA1B404997
S/Sd2MYA0JVmQuIt5bYowXR1KYKDka1d3DUgtoVTiFepIRUrMkZlCli08mWVjE6T
<emphasis>(11 lines omitted)</emphasis>
1MU24SHLgdTfDJprEdxZOnxajnbxL420xNVc5RRXlJA8Xxhx/HBKTw==
-----END RSA PRIVATE KEY-----</programlisting>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2 id="analog-setup">
    <title>Set up Log Analysis Reports - OPTIONAL</title>
    
    <para>Analog is a program with processes webserver access logs,
      performs DNS lookup, and outputs HTML reports.  Analog should
      <link linkend="analog-install">already be
      installed.</link>  A modified configuration file is included in
      the OpenACS tarball.</para>
    <orderedlist>
      <listitem>
        <screen>[root@yourserver src]# <userinput>su - service0</userinput>
[service0@yourserver service0]$ <userinput>cd /web/service0</userinput>
[service0@yourserver service0]$ <userinput>cp /web/service0/packages/acs-core-docs/www/files/analog.cfg.txt etc/analog.cfg</userinput>
[service0@yourserver service0]$ <userinput>mkdir www/log</userinput>
[service0@yourserver service0]$ <userinput>cp -r /usr/share/analog-5.31/images www/log/</userinput>
[service0@yourserver service0]$ <action>
su - service0
cd /web/service0
cp /web/service0/packages/acs-core-docs/www/files/analog.cfg.txt etc/analog.cfg
mkdir www/log
cp -r /usr/share/analog-5.31/images www/log/</action></screen>
        <para>Edit
<computeroutput>/web/service0/etc/analog.cfg</computeroutput> and change the variable in <computeroutput>HOSTNAME "[my
organisation]"</computeroutput> to reflect your website title.  If you
don't want the traffic log to be publicly visible, change
<computeroutput>OUTFILE /web/service0/www/log/traffic.html</computeroutput> to use a private
directory.</para>
      </listitem>
      <listitem>
        <para>Run it.</para>
        <screen>[service0@yourserver service0]$ <userinput>/usr/share/analog-5.31/analog -G -g/web/service0/etc/analog.cfg</userinput>
/usr/share/analog-5.31/analog: analog version 5.31/Unix
/usr/share/analog-5.31/analog: Warning F: Failed to open DNS input file
  /home/service0/dnscache: ignoring it
  (For help on all errors and warnings, see docs/errors.html)
/usr/share/analog-5.31/analog: Warning R: Turning off empty Search Word Report
[service0@yourserver service0]$</screen>
        <para>Verify that it works by browing to <computeroutput>http://yourserver.test:8000/log/traffic.html</computeroutput></para>
      </listitem>
      <listitem>
        <para>Automate this by creating a file in
          <computeroutput>/etc/cron.daily</computeroutput>.</para>
          <screen>[service0@yourserver service0]$ <userinput>exit</userinput>
logout

[root@yourserver root]# <userinput>emacs /etc/cron.daily/analog</userinput></screen>
        <para>Put this into the file:</para>
        <programlisting>#!/bin/sh

/usr/share/analog-5.31/analog -G -g/web/<replaceable>service0</replaceable>/etc/analog.cfg</programlisting>
        <screen>[root@yourserver root]# <userinput>chmod 755 /etc/cron.daily/analog</userinput></screen>
        <para>Test it by running the script.</para>
        <screen>[root@yourserver root]# <userinput>sh /etc/cron.daily/analog</userinput></screen>
        <para>Browse to <computeroutput>http://<replaceable>yourserver.test</replaceable>/log/traffic.html</computeroutput></para>
      </listitem>
    </orderedlist>
  </sect2>



    
    <para><phrase role="cvstag">($Id$)</phrase></para>
  </sect1>
  
  <!--
  Local Variables:
   sgml-parent-document: ("../index.xml" "book" "chapter")
  End:
  -->
