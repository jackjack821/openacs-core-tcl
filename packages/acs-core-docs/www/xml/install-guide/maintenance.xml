<sect1 id="maintenance-web">
  <title>Hosting Web Sites</title>
  
  <authorblurb>
    by <ulink url="mailto:joel@aufrecht.org">Joel Aufrecht</ulink>
  </authorblurb>

    <para>This section collection of maintenance
    tasks and alternate configurations for AOLserver.  This section has not yet been updated for &version;</para>

    <sect2 id="install-openacs-inittab" xreflabel="Editing inittab">
      <title>AOLserver keepalive with inittab</title>
      
      <para>This is an alternative method for keeping the AOLserver
		process running.  The recommended method is to <link
		linkend="install-openacs-keepalive">run AOLserver
		supervised</link>.</para>
      
      <para>
		This step should be completed as root. This can break every service
		on your machine, so proceed with caution.
	  </para>
      
      <itemizedlist>
        <listitem><para>
			There are 2 general steps to getting this working. 
		  </para>
          <orderedlist>
            <listitem><para> 
				Install a script called
				<computeroutput>restart-aolserver</computeroutput>. This
				script doesn't actually restart AOLserver - it just kills
				it.  
			  </para></listitem>
            
            <listitem><para>
				Ask the OS to restart our service whenever it's not
				running. We do this by adding a line to
				<computeroutput>/etc/inittab</computeroutput>.
			  </para></listitem>
          </orderedlist>
          
          <para>
			Calling <computeroutput>restart-aolserver</computeroutput>
			kills our service. The OS notices that our service is not
			running, so it automatically restarts it. Thus, calling
			<computeroutput>restart-aolserver</computeroutput> effectively
			restarts our service.  
		  </para></listitem>
        
		<listitem><para> 
			Copy this <ulink
			  url="files/restart-aolserver.txt">file</ulink> into
			<computeroutput>/tmp/restart-aolserver.txt</computeroutput>.
		  </para></listitem>

		<listitem><para> 
			This script needs to be SUID-root, which means
			that the script will run as root. This is necessary to ensure
			that the AOLserver processes are killed regardless of who owns
			them. However the script should be executable by the
			<computeroutput>web</computeroutput> group to ensure that the
			users updating the web page can use the script, but that
			general system users cannot run the script. You also need to
			have Perl installed and also a symbolic link to it in
			<computeroutput>/usr/local/bin</computeroutput>. 
		  </para>
		<programlisting>
joeuser:~$ su - 
Password: ***********
root:~# cp /tmp/restart-aolserver.txt /usr/local/bin/restart-aolserver
root:~# chown root.web /usr/local/bin/restart-aolserver
root:~# chmod 4750 /usr/local/bin/restart-aolserver
root:~# ln -s /usr/bin/perl /usr/local/bin/perl
root:~# exit</programlisting>
      </listitem>

      <listitem><para> 
			Test the <computeroutput>restart-aolserver</computeroutput>
			script. We'll first kill all running servers to clean the
			slate. Then, we'll start one server and use
			<computeroutput>restart-aolserver</computeroutput> to kill
			it. If it works, then there should be no more servers
			running. You should see the following lines. </para>

		<programlisting>
joeuser:~$ killall nsd
nsd: no process killed
joeuser:~$ /usr/local/aolserver/bin/nsd-postgres -t ~/web/<emphasis>birdnotes</emphasis>/nsd.tcl
joeuser:~$ restart-aolserver <emphasis>birdnotes</emphasis>
Killing 23727 
joeuser:~$ killall nsd
nsd: no process killed</programlisting>

        <para>
            The number 23727 indicates the process id(s) (PIDs) of the
            processes being killed. It is important that <emphasis
            role="strong">no processes are killed</emphasis> by the second
            call to <computeroutput>killall</computeroutput>. If there are
            processes being killed, it means that the script is not
            working.</para></listitem>

      <listitem><para> 
          Assuming that the <computeroutput>restart-aolserver</computeroutput>
          script worked, login as root and open
          <computeroutput>/etc/inittab</computeroutput> for
          editing. </para>
        <programlisting>
joeuser:~$ su -
Password: ************
root:~# emacs -nw /etc/inittab</programlisting>
      </listitem>

      <listitem><para> 
            Copy this line into the bottom of the file as a template,
            making sure that the first field
            <computeroutput>nss1</computeroutput> is unique.
          </para>
          <programlisting>
nss1:345:respawn:/usr/local/aolserver/bin/nsd-postgres -i -u nobody -g web -t /home/<emphasis>joeuser</emphasis>/web/<emphasis>birdnotes</emphasis>/nsd.tcl</programlisting>
        </listitem>

        <listitem><para>
            <emphasis role="strong">Important:</emphasis> Make sure there is a
            newline at the end of the file. If there is not a newline at
            the end of the file, the system may suffer catastrophic
            failures.  
          </para></listitem>

        <listitem><para>
            Still as root, enter the following command to re-initialize
            <computeroutput>/etc/inittab</computeroutput>. </para>

          <programlisting>
root:~# killall nsd    
nsd: no process killed
root:~# /sbin/init q</programlisting>        
        </listitem>

        <listitem><para> 
            See if it worked by running the
            <computeroutput>restart-aolserver</computeroutput> script
            again. </para>

          <programlisting>
root:~# restart-aolserver <emphasis>birdnotes</emphasis>
Killing 23750</programlisting>
        </listitem>
      </itemizedlist>

      <para>
        If processes were killed, congratulations, your server is now
        automated for startup and shutdown. 
      </para>
    </sect2>
  
  
  <sect2 id="install-openacs-port80">
    <title>Running AOLserver on Port 80</title>
    <para>If you want your webserver to be <computeroutput>http://yourserver.com</computeroutput>, it must run on port 80, the default HTTP port.  You set this in the <computeroutput>config.tcl</computeroutput> file.  You will need to start the service as
      <computeroutput>root</computeroutput>. If you follow the instructions
      above for <link linkend="install-openacs-keepalive">automating
      startup</link>, this will be taken care of, but if you ever start the
      server from the command line, be sure to <computeroutput>su
      -</computeroutput> first.
    </para>

    <para>
      Port 80 is a <emphasis>privileged</emphasis> port. Only certain users
      can claim it. When you start <computeroutput>nsd</computeroutput> as
      root, it obtains the port, and then changes to run as whatever user
      you specify in the server configuration file. This ensures a high
      level of security, as the server, once started, is not running as
      <computeroutput>root</computeroutput>. This mean that if someone was
      able to exploit your web server to execute a command on your server,
      they would not be able to gain <computeroutput>root</computeroutput>
      access.</para>
  </sect2>

  <sect2 id="install-next-add-server">
    <title>Running multiple services on one machine</title>
      <formalpara>
        <title>Services on different ports</title>
        <para>To run a different service on another port but the same
        ip, simply repeat <xref linkend="openacs"/> replacing
        <replaceable>service0</replaceable>, and change the
<programlisting>set httpport              8000
set httpsport             8443 </programlisting>
 to different values.</para>
      </formalpara>
      <formalpara>
        <title>Services on different host names</title>
        <para>For example, suppose you want to support
<computeroutput>http://foo.com</computeroutput> and
    <computeroutput>http://bar.com</computeroutput> on the same
    machine.  The easiest way is to assign each one a different ip
    address.  Then you can install two services as above, but with
        different values for
<programlisting>set hostname               [ns_info hostname]
set address                127.0.0.1 </programlisting>
</para>
    <para>If you want to install two services with different host
    names sharing the same ip, you'll need nsvhr to redirect requests
    based on the contents of the tcp headers.  See <ulink
    url="http://borkware.com/rants/aolserver-vhosting/">AOLserver
    Virtual Hosting with TCP</ulink> by <ulink url="mailto:markd@borkware.com">markd</ulink>.
</para>
  </formalpara>
  </sect2>
    
    <para><phrase role="cvstag">($Id$)</phrase></para>
  </sect1>
  
  <!--
  Local Variables:
   sgml-parent-document: ("../index.xml" "book" "chapter")
  End:
  -->
