  <appendix id="install-more-software">
    <title>Install additional supporting software</title>

    <authorblurb>
      by <ulink url="mailto:joel@aufrecht.org">Joel Aufrecht</ulink>
    </authorblurb>
    
      <para>This section assumes that the source tarballs for supporting
    software are in <computeroutput>/tmp</computeroutput>.  It assumes
    that you begin each continuous block of commands as root, and you
    should end each block as root.  It doesn't care which directory
    you start in.  Text instructions always precede the commands they
      refer to.</para>

      <sect1 id="openacs-unpack">
        <title>Unpack the OpenACS tarball</title>
        <para>The OpenACS tarball contains sample configuration files
      for some of the packages listed below.  In order to access those
      files, unpack the tarball now.</para>
        <screen>[root@yourserver root]# <userinput>cd /tmp</userinput>
[root@yourserver tmp]# <userinput>tar xzf &tarballpath;.tgz</userinput>
<action>cd /tmp
tar xzf &tarballpath;.tgz</action></screen>
      </sect1>
      <sect1 id="install-cvs">
      <title>Initialize CVS (OPTIONAL)</title>
      <indexterm>
        <primary>cvs</primary>
        <secondary>initializing</secondary>
      </indexterm>
      <para>CVS is a source control system.  Create and initialize a
      directory for a local cvs repository.</para>
      <screen>[root@yourserver tmp]# <userinput>mkdir /cvsroot</userinput>
[root@yourserver tmp]#<userinput> cvs -d /cvsroot init</userinput>
[root@yourserver tmp]#
<action>mkdir /cvsroot
cvs -d /cvsroot init</action></screen>
    </sect1>

    <sect1 id="psgml-for-emacs">
      <title>Add PSGML commands to emacs init file (OPTIONAL)</title>
      <para><indexterm>
          <primary>DocBook</primary>
          <secondary>emacs configuration for</secondary>
        </indexterm>
If you plan to write or edit any documentation with emacs, install a
      customized emacs configuration file with DocBook commands in the skeleton
      directory, so it will be used for all new users.  The file also
      fixes the backspace -> help mis-mapping that often occurs in
      terminals.</para>

      <screen>[root@yourserver tmp]# <userinput>cp /tmp/&tarballpath;/packages/acs-core-docs/www/files/emacs.txt /etc/skel/.emacs</userinput>
cp: overwrite `/etc/skel/.emacs'? <userinput>y</userinput>
[root@yourserver tmp]# </screen>
    </sect1>

    <sect1 id="install-daemontools">
      <title>Install Daemontools (OPTIONAL)</title>
      <para>Daemontools is a collection of programs for controlling
      other processes.  We use daemontools to run and monitor AOLServer.  It is
      installed in /package.  These commands install daemontools and
      svgroup.  svgroup is a script for granting permissions, to allow
      users other than root to use daemontools for specific
      services.</para>
      <orderedlist>
        <listitem>
          <para>Install Daemontools</para>
          <indexterm>
            <primary>daemontools</primary>
            <secondary>installation</secondary>
          </indexterm>
          <itemizedlist>
            <listitem>
              <para>Red Hat</para>
              <para>Make sure you have the source tarball in
          <computeroutput>/tmp</computeroutput>, or <link
          linkend="daemontools-download">download it</link>.  (The -p
              flag in mkdir causes all implied directories in the path
              to be made as well.)</para>
            <para>(If you are using Red Hat 9.0, you need to put <computeroutput>#include &lt;errno.h&gt;</computeroutput> as the first line of <computeroutput>/package/admin/daemontools-0.76/src/error.h</computeroutput>.  <ulink url="http://www.riverside.org/archive/html/djbdns/2003-01/msg00307.html">More information</ulink>)</para>
              <screen>[root@yourserver root]# <userinput>mkdir -p /package</userinput>
[root@yourserver root]# <userinput>chmod 1755 /package/</userinput>
[root@yourserver root]# <userinput>cd /package/</userinput>
[root@yourserver package]# <userinput>tar xzf /tmp/daemontools-0.76.tar.gz</userinput>
[root@yourserver package]# <userinput>cd admin/daemontools-0.76/</userinput>
[root@yourserver daemontools-0.76]# <userinput>package/install</userinput>
Linking ./src/* into ./compile...
(many lines omitted)
Creating /service...
Adding svscanboot to inittab...
init should start svscan now.
[root@yourserver root]#
<action>mkdir -p /package 
chmod 1755 /package 
cd /package 
tar xzf /tmp/daemontools-0.76.tar.gz 
cd admin/daemontools-0.76 
package/install</action></screen>
            </listitem>
            <listitem>
              <para>Debian</para>
              <screen>root:~# apt-get install daemontools-installer
root:~# build-daemontools</screen>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
      <para>Verify that svscan is running.  If it is, you should see
      these two processes running:</para>
      <screen>[root@yourserver root]# <userinput>ps -auxw | grep service</userinput>
root     13294  0.0  0.1  1352  272 ?        S    09:51   0:00 svscan /service
root     13295  0.0  0.0  1304  208 ?        S    09:51   0:00 readproctitle service errors: .......................................
[root@yourserver root]#</screen>
        </listitem>
        <listitem>
          <para>Install a script to grant non-root users permission to
        control daemontools services.</para>
          <screen>[root@yourserver root]# <userinput>cp /tmp/&tarballpath;/packages/acs-core-docs/www/files/svgroup.txt /usr/local/bin/svgroup</userinput>
[root@yourserver root]# <userinput>chmod 755 /usr/local/bin/svgroup</userinput>
<action>cp /tmp/&tarballpath;/packages/acs-core-docs/www/files/svgroup.txt /usr/local/bin/svgroup 
chmod 755 /usr/local/bin/svgroup</action></screen>
        </listitem>
      </orderedlist>
    </sect1>
    <sect1 id="install-qmail">
      <title>Install qmail (OPTIONAL)</title>
      <para>Qmail is a Mail Transfer Agent.  It handles incoming and outgoing mail.  Install qmail if you want your OpenACS server to send and receive mail, and you don't want to use an alternate MTA.</para>
      <orderedlist>
        <listitem>
          <formalpara>
            <title>Install ucspi</title>
              <para>This program handles incoming tcp connections.
              <link linkend="ucspi-download">Download ucspi</link> and install it.</para>
          </formalpara>
          <screen>[root@yourserver root]# <userinput>cd /usr/local/src</userinput>
[root@yourserver src]# <userinput>tar xzf /tmp/ucspi-tcp-0.88.tar.gz</userinput>
[root@yourserver src]# <userinput>cd ucspi-tcp-0.88</userinput>
[root@yourserver ucspi-tcp-0.88]#<userinput> make</userinput>
( cat warn-auto.sh; \
echo 'main="$1"; shift'; \
(many lines omitted)
./compile instcheck.c
./load instcheck hier.o auto_home.o unix.a byte.a
[root@yourserver ucspi-tcp-0.88]# <userinput>make setup check</userinput>
./install
./instcheck
[root@yourserver ucspi-tcp-0.88]#
<action>cd /usr/local/src 
tar xzf /tmp/ucspi-tcp-0.88.tar.gz 
cd ucspi-tcp-0.88 
make 
make setup check</action></screen>
          <para>Verify that ucspi-tcp was installed successfully by
running the tcpserver program which is part of ucspi-tcp:</para>
          <screen>[root@yourserver ucspi-tcp-0.88]# <userinput>tcpserver</userinput>
tcpserver: usage: tcpserver [ -1UXpPhHrRoOdDqQv ] [ -c limit ] [ -x rules.cdb ] [ -B banner ] [ -g gid ] [ -u uid
] [ -b backlog ] [ -l localname ] [ -t timeout ] host port program
[root@yourserver ucspi-tcp-0.88]#
</screen>
          <para><indexterm>
              <primary>qmail</primary>
              <secondary>rcpthosts error message</secondary>
            </indexterm>
(I'm not sure if this next step is 100% necessary, but when I skip it
I get problems.  If you get the error <computeroutput>553 sorry, that domain isn't in my list of allowed rcpthosts (#5.7.1)</computeroutput> then you need to do this.)  AOLServer sends outgoing mail via the ns_sendmail
command, which pipes a command to the sendmail executable.  Or, in our
case, the qmail replacement wrapper for the sendmail executable.  In
some cases, though, the outgoing mail requset is apparently sent
through tcp/ip, so that it comes to qmail from 127.0.0.1 (a special IP
address that means the local machine - the "loopback" interface).
Unless this mail is addressed to the same machine, qmail thinks that
it's an attempt to relay mail, and rejects it.  So these two commands
set up an exception so that any mail sent from 127.0.0.1 is allowed to
send outgoing mail.</para>
          <screen>[root@yourserver ucspi-tcp-0.88]# <userinput>cp /tmp/&tarballpath;/packages/acs-core-docs/www/files/tcp.smtp.txt /etc/tcp.smtp</userinput>
[root@yourserver ucspi-tcp-0.88]# <userinput>tcprules /etc/tcp.smtp.cdb /etc/tcp.smtp.tmp &lt; /etc/tcp.smtp</userinput>
<action>cp /tmp/&tarballpath;/packages/acs-core-docs/www/files/tcp.smtp.txt /etc/tcp.smtp 
tcprules /etc/tcp.smtp.cdb /etc/tcp.smtp.tmp &lt; /etc/tcp.smtp </action></screen>
          </listitem>
          <listitem>
            <formalpara>
              <title>Install Qmail</title>
              <indexterm>
                <primary>qmail</primary>
                <secondary>installation</secondary>
              </indexterm>
              <para></para>
            </formalpara>
            <para><link linkend="ucspi-download">Download qmail</link>,
            set up the standard supporting users and build the binaries:</para>
            <para>(If you are using Red Hat 9.0, you need to put <computeroutput>#include &lt;errno.h&gt;</computeroutput> as the first line of <computeroutput>/usr/local/src/qmail-1.03/error.h</computeroutput>.  <ulink url="http://www.riverside.org/archive/html/djbdns/2003-01/msg00307.html">More information</ulink>)</para>
            <screen>[root@yourserver root]# <userinput>cd /usr/local/src</userinput>
[root@yourserver src]# <userinput>tar xzf /tmp/qmail-1.03.tar.gz</userinput>
[root@yourserver src]# <userinput>mkdir /var/qmail</userinput>
[root@yourserver src]#<userinput> groupadd nofiles</userinput>
[root@yourserver src]# <userinput>useradd -g nofiles -d /var/qmail/alias alias</userinput>
[root@yourserver src]# <userinput>useradd -g nofiles -d /var/qmail qmaild</userinput>
[root@yourserver src]# <userinput>useradd -g nofiles -d /var/qmail qmaill</userinput>
[root@yourserver src]# <userinput>useradd -g nofiles -d /var/qmail qmailp</userinput>
[root@yourserver src]# <userinput>groupadd qmail</userinput>
[root@yourserver src]# <userinput>useradd -g qmail -d /var/qmail qmailq</userinput>
[root@yourserver src]# <userinput>useradd -g qmail -d /var/qmail qmailr</userinput>
[root@yourserver src]# <userinput>useradd -g qmail -d /var/qmail qmails</userinput>
[root@yourserver src]# <userinput>cd qmail-1.03</userinput>
[root@yourserver qmail-1.03]# <userinput>make setup check</userinput>
( cat warn-auto.sh; \
echo CC=\'`head -1 conf-cc`\'; \
(many lines omitted)
./install
./instcheck
[root@yourserver qmail-1.03]#
<action>cd /usr/local/src 
tar xzf /tmp/qmail-1.03.tar.gz 
mkdir /var/qmail 
groupadd nofiles 
useradd -g nofiles -d /var/qmail/alias alias 
useradd -g nofiles -d /var/qmail qmaild 
useradd -g nofiles -d /var/qmail qmaill 
useradd -g nofiles -d /var/qmail qmailp 
groupadd qmail 
useradd -g qmail -d /var/qmail qmailq 
useradd -g qmail -d /var/qmail qmailr 
useradd -g qmail -d /var/qmail qmails
cd qmail-1.03 
make setup check</action></screen>
          <para>Replace sendmail with qmail's wrapper.</para>
          <indexterm>
            <primary>sendmail</primary>
            <secondary>removing</secondary>
          </indexterm>
          <screen>[root@yourserver qmail-1.03]# <userinput>rm -f /usr/bin/sendmail</userinput>
[root@yourserver qmail-1.03]# <userinput>ln -s /var/qmail/bin/sendmail /usr/sbin/sendmail</userinput>
[root@yourserver qmail-1.03]#
<action>rm -f /usr/bin/sendmail 
ln -s /var/qmail/bin/sendmail /usr/sbin/sendmail</action></screen>
          <para>Configure qmail - specifically, run the config script to set up files in <computeroutput>/var/qmail/control</computeroutput> specifying the computer's identity and which addresses it should accept mail for.  This command will automatically set up qmail correctly if you have correctly set a valid host nome.  If not, you'll want to read <computeroutput>/var/qmail/doc/INSTALL.ctl</computeroutput> to find out how to configure qmail.</para>
            <screen>[root@yourserver qmail-1.03]# <userinput>./config-fast <replaceable>yourserver.test</replaceable></userinput>
Your fully qualified host name is yourserver.test.
Putting yourserver.test into control/me...
Putting yourserver.test into control/defaultdomain...
Putting yourserver.test into control/plusdomain...
Putting yourserver.test into control/locals...
Putting yourserver.test into control/rcpthosts...
Now qmail will refuse to accept SMTP messages except to yourserver.test.
Make sure to change rcpthosts if you add hosts to locals or virtualdomains!
[root@yourserver qmail-1.03]#
<action>./config-fast <replaceable>yourserver.test</replaceable></action></screen>
          <para>All incoming mail that isn't for a specific user is handled by the <computeroutput>alias</computeroutput> user.  This includes all root mail.  These commands prepare the alias user to receive mail.</para>
          <screen>[root@yourserver qmail-1.03]# <userinput>cd ~alias; touch .qmail-postmaster .qmail-mailer-daemon .qmail-root</userinput>
[root@yourserver alias]# <userinput>chmod 644 ~alias/.qmail*</userinput>
[root@yourserver alias]# <userinput>/var/qmail/bin/maildirmake ~alias/Maildir/</userinput>
[root@yourserver alias]# <userinput>chown -R alias.nofiles /var/qmail/alias/Maildir</userinput>
[root@yourserver alias]#
<action>cd ~alias; touch .qmail-postmaster .qmail-mailer-daemon .qmail-root 
chmod 644 ~alias/.qmail* 
/var/qmail/bin/maildirmake ~alias/Maildir/ 
chown -R alias.nofiles /var/qmail/alias/Maildir</action></screen>
            <indexterm>
              <primary>qmail</primary>
              <secondary>Maildir</secondary>
            </indexterm>
            <para>Configure qmail to use the Maildir delivery format
          (instead of mbox), and install a version of the qmail startup script modified to use Maildir.</para>
            <screen>[root@yourserver alias]# <userinput>echo "./Maildir" > /var/qmail/bin/.qmail</userinput>
[root@yourserver alias]# <userinput>cp /tmp/&tarballpath;/packages/acs-core-docs/www/files/qmail.rc.txt /var/qmail/rc</userinput>
[root@yourserver alias]# <userinput>chmod 755 /var/qmail/rc</userinput>
[root@yourserver alias]# 
<action>echo "./Maildir" &gt; /var/qmail/bin/.qmail 
cp /tmp/&tarballpath;/packages/acs-core-docs/www/files/qmail.rc.txt /var/qmail/rc 
chmod 755 /var/qmail/rc 
</action></screen>
            <para>Set up the skeleton directory so that new users will
          be configured for qmail.</para>
            <screen>[root@localhost root]# <userinput>/var/qmail/bin/maildirmake /etc/skel/Maildir</userinput>
[root@localhost root]# <userinput>echo "./Maildir/" > /etc/skel/.qmail</userinput>
[root@localhost root]# 
<action>/var/qmail/bin/maildirmake /etc/skel/Maildir
echo "./Maildir/" > /etc/skel/.qmail</action></screen>

            <para>Qmail runs in two parts.  First, several different
          qmail daemons are started by the qmail rc file.  Second, a
          process is started in within tcpserver to listen for incoming smtp traffic.  Run both of these commands to start qmail.  Be very careful about line breaks - there should be a total of two commands here.  Note also that the tcpserver command takes the uid and guid of <computeroutput>qmaild</computeroutput>, which will only be 502 and 501 if you have followed all of these instructions exactly and in order.  Otherwise, <userinput>grep qmaild /etc/passwd</userinput> to find uid and guid, in that order.</para>
          <screen>[root@yourserver alias]# <userinput>/usr/local/bin/tcpserver -x /etc/tcp.smtp.cdb -v -u <replaceable>502</replaceable> -g <replaceable>501</replaceable> 0 smtp /var/qmail/bin/qmail-smtpd 2>&amp;1 | /var/qmail/bin/splogger smtpd 3 &amp;</userinput>
[1] 15863
[root@yourserver alias]# <userinput>csh -cf '/var/qmail/rc &amp;'</userinput>
[1] 15865
[root@yourserver alias]#
<action>/usr/local/bin/tcpserver -x /etc/tcp.smtp.cdb -v -u <replaceable>502</replaceable> -g <replaceable>501</replaceable> 0 smtp /var/qmail/bin/qmail-smtpd 2&gt;&amp;1 | /var/qmail/bin/splogger smtpd 3 &amp; 
csh -cf '/var/qmail/rc &amp;'</action></screen>
          <para>Verify that seven different qmail threads are running:</para>
          <screen>[root@yourserver alias]# <userinput>ps -auxw | grep
          qmail</userinput>
qmaild    4269  0.0  0.3  1384  452 pts/0    S    21:21   0:00 [tcpserver]
root      4270  0.0  0.3  1340  412 pts/0    S    21:21   0:00 /var/qmail/bin/splogger smtpd 3
qmails    4272  0.1  0.2  1364  320 pts/0    S    21:21   0:00 [qmail-send]
qmaill    4273  0.0  0.3  1332  408 pts/0    S    21:21   0:00 [splogger]
root      4274  0.0  0.2  1332  272 pts/0    S    21:21   0:00 qmail-lspawn ./Maildir/
qmailr    4275  0.0  0.2  1328  272 pts/0    S    21:21   0:00 [qmail-rspawn]
qmailq    4276  0.0  0.2  1324  280 pts/0    S    21:21   0:00 [qmail-clean]
root      4278  0.0  0.5  3280  632 pts/0    S    21:21   0:00 grep qmail
[root@yourserver alias]#</screen>
          <para>Further verify by sending and receiving email.  Incoming mail for root is stored in <computeroutput>/var/qmail/alias/Maildir</computeroutput>.  If it worked, make it permanent by putting the same commands in your startup scripts.  (These instructions put the commands in rc.local, which means that they'll be run once, on boot.  There will be no monitoring and no interface to start and stop and check status.  We ought instead to either use full init scripts or daemontools.)</para>
          <screen>[root@yourserver alias]# <userinput>echo "/usr/local/bin/tcpserver -x /etc/tcp.smtp.cdb -v -u <replaceable>502</replaceable> -g <replaceable>501</replaceable> 0 smtp /var/qmail/bin/qmail-smtpd \ " &gt;&gt; /etc/rc.local</userinput>
[root@yourserver alias]# <userinput>echo "2&gt;&amp;1 | /var/qmail/bin/splogger smtpd 3 &amp;  " &gt;&gt; /etc/rc.local</userinput>
[root@yourserver alias]# <userinput>echo "csh -cf '/var/qmail/rc &amp;' " &gt;&gt; /etc/rc.local</userinput>
[root@yourserver alias]# 
<action>echo "/usr/local/bin/tcpserver -x /etc/tcp.smtp.cdb -v -u <replaceable>502</replaceable> -g <replaceable>501</replaceable> 0 smtp /var/qmail/bin/qmail-smtpd \ " &gt;&gt; /etc/rc.local
echo "2&gt;&amp;1 | /var/qmail/bin/splogger smtpd 3 &amp;  " &gt;&gt; /etc/rc.local
echo "csh -cf '/var/qmail/rc &amp;' " &gt;&gt; /etc/rc.local</action></screen>
          </listitem>
          <listitem id="analog-install">
            <para>Analog web file analyser.  You should
have the <link linkend="analog-download">source tarball</link> in
<computeroutput>/tmp</computeroutput>.  Unpack, compile, and install analog.</para>
            <screen>[root@yourserver aolserver]# <userinput>cd /usr/local/src</userinput>
[root@yourserver src]# <userinput>tar xzf /tmp/analog-5.31.tar.gz</userinput>
[root@yourserver src]# <userinput>cd analog-5.31</userinput>
[root@yourserver analog-5.31]# <userinput>make</userinput>
cd src &amp;&amp; make
make[1]: Entering directory `/usr/local/src/analog-5.31/src'
<emphasis>(many lines omitted)</emphasis>
***IMPORTANT: You must read the licence before using analog
***
make[1]: Leaving directory `/usr/local/src/analog-5.31/src'
[root@yourserver analog-5.31]# <userinput>cd ..</userinput>
[root@yourserver src]#<userinput> mv analog-5.31 /usr/share/</userinput>
[root@yourserver src]#
<action>cd /usr/local/src
tar xzf /tmp/analog-5.31.tar.gz
cd analog-5.31
make
cd ..
mv analog-5.31 /usr/share/</action></screen>
          <para>See also <xref linkend="analog-setup"/></para>
        </listitem>
        
      </orderedlist>
    </sect1>
    
    <sect1 id="install-full-text-search">
      <title></title>
      <sect2 id="install-openfts">
      <title>Install OpenFTS module</title>
        <indexterm>
          <primary>full text search</primary>
          <secondary>installation</secondary>
        </indexterm>
      <para>If you want full text search, and you are running PostGreSQL, install this module to support FTS.  Do this step after you have installed both PostGreSQL and
      Aolserver.  You will need the <link linkend="openfts-download">openfts
      tarball</link> in <computeroutput>/tmp</computeroutput>.</para>
          <orderedlist>
            <listitem>
              <para>Install Tsearch.  This is a PostGreSQL module that
	  OpenFTS requires.</para>
              <screen>[root@yourserver root]# <userinput>su - postgres</userinput>
[postgres@yourserver pgsql]$ <userinput>cd /usr/local/src/postgresql-7.2.4/contrib/tsearch/</userinput>
[postgres@yourserver tsearch]$ <userinput>make</userinput>
sed 's,MODULE_PATHNAME,$libdir/tsearch,g' tsearch.sql.in >tsearch.sql
/usr/bin/flex  -8 -Ptsearch_yy -o'parser.c' parser.l
(many lines omitted)
rm -f libtsearch.so
ln -s libtsearch.so.0.0 libtsearch.so
[postgres@yourserver tsearch]$ <userinput>make install</userinput>
mkdir /usr/local/pgsql/share/contrib
mkdir /usr/local/pgsql/doc/contrib
(2 lines omitted)
/bin/sh ../../config/install-sh -c -m 755 libtsearch.so.0.0 /usr/local/pgsql/lib/tsearch.so
[postgres@yourserver tsearch]$ <userinput>exit</userinput>
logout

[root@yourserver root]#
<action>su - postgres
cd /usr/local/src/postgresql-7.2.4/contrib/tsearch
make
make install
exit</action></screen>
            </listitem>
            <listitem>
              <para>Unpack the OpenFTS tarball and compile and install
              the driver.</para>
              <screen>[root@yourserver root]# <userinput>cd /usr/local/src</userinput>
[root@yourserver src]# <userinput>tar xzf /tmp/Search-OpenFTS-tcl-0.3.2.tar.gz</userinput>
[root@yourserver src]# <userinput>cd /usr/local/src/Search-OpenFTS-tcl-0.3.2/</userinput>
[root@yourserver Search-OpenFTS-tcl-0.3.2]# <userinput>./configure --with-aolserver-src=/usr/local/src/aolserver/aolserver --with-tcl=/usr/lib/</userinput>
checking prefix... /usr/local
checking for gcc... gcc
<emphasis>(many lines omitted)</emphasis>
configure: creating ./config.status
config.status: creating Makefile.global
[root@yourserver Search-OpenFTS-tcl-0.3.2]#<userinput> make</userinput>
(cd parser; make all)
make[1]: Entering directory `/usr/local/src/Search-OpenFTS-tcl-0.3.2/parser'
<emphasis>(many lines omitted)</emphasis>
packages provided were {Lingua::Stem::Snowball 0.3.2}
processed fts_base_snowball.tcl
[root@yourserver Search-OpenFTS-tcl-0.3.2]# <userinput>cd aolserver</userinput>
[root@yourserver aolserver]# <userinput>make</userinput>
gcc -c -fPIC  -DPACKAGE=\"OPENFTS\" -DVERSION=\"0.3.2\" -DHAVE_UNISTD_H=1 -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STR
<emphasis>(many lines omitted)</emphasis>
n_stem.o italian_stem.o norwegian_stem.o portuguese_stem.o russian_stem.o nsfts.o  -o nsfts.so
[root@yourserver aolserver]# <userinput>cp nsfts.so /usr/local/aolserver/bin/</userinput>
[root@yourserver aolserver]#
<action>cd /usr/local/src 
tar xzf /tmp/Search-OpenFTS-tcl-0.3.2.tar.gz
cd /usr/local/src/Search-OpenFTS-tcl-0.3.2/
./configure --with-aolserver-src=/usr/local/src/aolserver/aolserver --with-tcl=/usr/lib/
make
cd aolserver
make
cp nsfts.so /usr/local/aolserver/bin
</action></screen>
        </listitem>
        <listitem>
          <para>Build some supplemental modules.</para>
          <screen>[root@yourserver aolserver]# <userinput>cd /usr/local/src/Search-OpenFTS-tcl-0.3.2</userinput>
[root@yourserver Search-OpenFTS-tcl-0.3.2]# <userinput>cp -r pgsql_contrib_openfts /usr/local/src/postgresql-7.2.4/contrib</userinput>
[root@yourserver Search-OpenFTS-tcl-0.3.2]# <userinput>cd /usr/local/src/postgresql-7.2.4/contrib/pgsql_contrib_openfts</userinput>
[root@yourserver pgsql_contrib_openfts]#<userinput> make</userinput>
sed 's,MODULE_PATHNAME,$libdir/openfts,g' openfts.sql.in >openfts.sql
gcc -O2 -Wall -Wmissing-prototypes -Wmissing-declarations -fpic -I. -I../../src/include   -c -o openfts.o openfts.c
gcc -shared -o openfts.so openfts.o
rm openfts.o
[root@yourserver pgsql_contrib_openfts]# <userinput>su postgres</userinput>
[postgres@yourserver pgsql_contrib_openfts]$ <userinput>make install</userinput>
/bin/sh ../../config/install-sh -c -m 644 openfts.sql /usr/local/pgsql/share/contrib
/bin/sh ../../config/install-sh -c -m 755 openfts.so /usr/local/pgsql/lib
/bin/sh ../../config/install-sh -c -m 644 ./README.openfts /usr/local/pgsql/doc/contrib
[postgres@yourserver pgsql_contrib_openfts]$<userinput> exit</userinput>
[root@yourserver pgsql_contrib_openfts]#
<action>cd /usr/local/src/Search-OpenFTS-tcl-0.3.2
cp -r pgsql_contrib_openfts /usr/local/src/postgresql-7.2.4/contrib
cd /usr/local/src/postgresql-7.2.4/contrib/pgsql_contrib_openfts
make
su postgres
make install
exit</action></screen>
        </listitem>
      </orderedlist>
      </sect2>
      
      <sect2 id="install-openfts-postgres">
        <title>Install OpenFTS prerequisites in PostGreSQL instance</title> 
        <indexterm>
          <primary>full text search</primary>
          <secondary>installation</secondary>
        </indexterm>
        <para>If you are installing Full Text Search, add required
        packages to the new database.  (In order for full text search
        to work, you must also <link
        linkend="install-openfts">install</link> the PostGreSQL
        OpenFTS module and prerequisites.)</para>
        <screen>[service0@yourserver service0]$ <userinput>/usr/local/pgsql/bin/psql <replaceable>service0</replaceable> -f /usr/local/src/postgresql-7.2.4/contrib/tsearch/tsearch.sql</userinput>
BEGIN
CREATE
<emphasis>(many lines omitted)</emphasis>
INSERT 0 1
COMMIT
[service0@yourserver service0]$ <userinput>/usr/local/pgsql/bin/psql <replaceable>service0</replaceable> -f /usr/local/src/postgresql-7.2.4/contrib/pgsql_contrib_openfts/openfts.sql</userinput>
CREATE
CREATE
[service0@yourserver service0]$
<action>/usr/local/pgsql/bin/psql <replaceable>service0</replaceable> -f /usr/local/src/postgresql-7.2.4/contrib/tsearch/tsearch.sql
/usr/local/pgsql/bin/psql <replaceable>service0</replaceable> -f /usr/local/src/postgresql-7.2.4/contrib/pgsql_contrib_openfts/openfts.sql</action></screen>
      </sect2>
      
      <sect2 id="enable-openfts">
        <title>Enable OpenFTS in config.tcl</title>
        <para>If you have <link linkend="install-openfts">installed OpenFTS</link>, you can enable it for this service.  Uncomment this line from <computeroutput>config.tcl</computeroutput>.  (To uncomment a line in a tcl file, remove the <computeroutput>#</computeroutput> at the beginning of the line.)</para>
        <programlisting>#ns_param   nsfts           ${bindir}/nsfts.so</programlisting>
      </sect2>

      <sect2 id="install-fts-engine">
        <title>Install Full Text Search Engine</title>
        <orderedlist>
          <listitem>
            <para>Click <computeroutput><guilabel>Package Manager</guilabel></computeroutput> on the right side of the default home page.  If prompted, log in with the account and password you entered during install.</para>
          </listitem>

          <listitem><para>Click on the <computeroutput><guilabel>Install
packages</guilabel></computeroutput> link.</para>
          </listitem>

	<listitem><para>On the next screen, after it loads, click on <computeroutput><guilabel>Uncheck all boxes</guilabel></computeroutput>, then click the second checkbox next to <computeroutput><guilabel>OpenFTS Driver 4.2</guilabel></computeroutput>.  This will automatically check the first box. Then click <computeroutput><guibutton><accel>N</accel>ext</guibutton></computeroutput>. </para></listitem>
          
          <listitem><para>Click <computeroutput><guibutton>Install Packages</guibutton></computeroutput></para></listitem>
          
          <listitem><para>Restart the service.</para>
<screen>[service0@yourserver service0]$ <userinput>svc -t /service/<replaceable>service0</replaceable></userinput>
[service0@yourserver service0]$</screen></listitem>
          
          <listitem><para>Wait a minute, then browse back to the home page.</para>
          </listitem>

          <listitem><para>Click on <computeroutput><guilabel>Site Map</guilabel></computeroutput> on the top right side of the screen.</para>
          </listitem>
          
          <listitem>
            <para>Mount the OpenFTS Full Text Search Engine in the site map.</para>
            <orderedlist>
              <listitem><para>Click the <computeroutput><guilabel>new sub folder</guilabel></computeroutput> link on the "/" line, the first line under Main Site:/.</para></listitem>
              <listitem><para>Type <userinput>openfts</userinput>
and click <computeroutput><guibutton>New</guibutton></computeroutput>.</para></listitem>
              <listitem><para>On the new <computeroutput><guilabel>openfts</guilabel></computeroutput> line, click the <computeroutput><guilabel>mount</guilabel></computeroutput> link.</para></listitem>
              <listitem><para>Click <computeroutput><guilabel>OpenFTS
Driver</guilabel></computeroutput>.</para></listitem>
              <listitem><para>On the <computeroutput><guilabel>openfts</guilabel></computeroutput> line, click <computeroutput><guilabel>set parameters</guilabel></computeroutput>.</para>
              </listitem>
              <listitem><para>Change <computeroutput><guilabel>openfts_tcl_src_path</guilabel></computeroutput> to <userinput>/usr/local/src/Search-OpenFTS-tcl-0.3.2/</userinput> and click <computeroutput><guibutton>Set Parameters</guibutton></computeroutput>
              </para>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>Mount the Search interface in the site map.</para>
            <orderedlist>
              <listitem><para>Click the
<computeroutput><guilabel>new sub folder</guilabel></computeroutput> link on the
Main Site line. </para></listitem>
              <listitem><para>Type <userinput>search</userinput>
and click <computeroutput><guibutton>New</guibutton></computeroutput>. </para></listitem>
              <listitem><para>Click the <computeroutput><guilabel>new
application</guilabel></computeroutput> link on the <computeroutput><guilabel>search</guilabel></computeroutput>
	  line. </para></listitem>
              <listitem><para>Type <userinput>search</userinput>
where it says
<computeroutput><guilabel>untitled</guilabel></computeroutput>, choose
<computeroutput><guilabel>search</guilabel></computeroutput> from the
drop-down list, and click
<computeroutput><guibutton>New</guibutton></computeroutput>.
</para></listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>Restart the service.</para>
            <screen>[service0@yourserver service0]$ <userinput>svc -t /service/<replaceable>service0</replaceable></userinput>
[service0@yourserver service0]$</screen>
          </listitem>
          <listitem><para>Wait a minute, then click on <computeroutput><guilabel>Main Site</guilabel></computeroutput> at the top of the page.</para>
          </listitem>
          <listitem>
            <para>Initialize the OpenFTS Engine.  This creates a set of tables in the database to support FTS.</para>
            <para>Near the bottom of the page, click on the <computeroutput><guilabel>OpenFTS Driver</guilabel></computeroutput> link. Click on <computeroutput><guilabel>Administration</guilabel></computeroutput>.
Click on <computeroutput><guilabel>Initialize OpenFTS Engine</guilabel></computeroutput>. 
Click <computeroutput><guibutton>Initialize OpenFTS Engine</guibutton></computeroutput>. </para>
          </listitem>
          <listitem>
            <para>Add the FTS Engine service contract</para>
            <orderedlist>
              <listitem><para>Click on the <computeroutput><guilabel>Main
Site</guilabel></computeroutput>. </para></listitem>
              <listitem><para>Click on the <computeroutput><guilabel>ACS
Service Contract</guilabel></computeroutput> link near the bottom of the home page. </para></listitem>
              <listitem><para>On the <computeroutput><guilabel>FtsEngineDriver</guilabel></computeroutput>
line, click
<computeroutput><guilabel>Install</guilabel></computeroutput>.
</para></listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <para>Restart the service.</para>
            <screen>[service0@yourserver service0]$ <userinput>svc -t /service/<replaceable>service0</replaceable></userinput>
[service0@yourserver service0]$</screen>
          </listitem>
          <listitem>
            <para>Test FTS.  (INCOMPLETE).  Add a package that supports search,like "note," add some content, and search for it.</para>
          </listitem>
        </orderedlist>
      </sect2>
    </sect1>


    <sect1 id="install-nsopenssl">
      <title>Install nsopenssl</title>
      <para>This AOLserver module is required if you want people to connect to your site via
          https.  These commands compile nsopenssl and install it,
          along with a tcl helper script to handle https connections.
          You will also need ssl certificates.  Because those should
          be different for each server service, you won't need <link
          linkend="ssl-certificates">those instructions</link> until
          later.  You will need the <link
      linkend="install-aolserver-compile">unpacked Aolserver tarball</link> in
      <computeroutput>/usr/local/src/aolserver</computeroutput> and
      the <link
          linkend="nsopenssl-download">nsopenssl tarball</link> in
          <computeroutput>/tmp</computeroutput>.</para>
      <para>(Red Hat 9 note: see <ulink
          url="http://openacs.org/forums/message-view?message_id=92882">this
          thread</ulink> for details on compiling nsopenssl.)</para>

      <screen>[root@yourserver bin]#<userinput> cd /usr/local/src/aolserver</userinput>
[root@yourserver aolserver]# <userinput>tar xzf /tmp/nsopenssl-2.1.tar.gz</userinput>
[root@yourserver aolserver]# <userinput>cd nsopenssl-2.1</userinput>
[root@yourserver nsopenssl-2.1]# <userinput>make OPENSSL=/usr/local/ssl</userinput>
gcc -I/usr/local/ssl/include -I../aolserver/include -D_REENTRANT=1 -DNDEBUG=1 -g -fPIC -Wall -Wno-unused -mcpu=i686 -DHAVE_CMMSG=1 -DUSE_FIONREAD=1 -DHAVE_COND_EINTR=1   -c -o nsopenssl.o nsopenssl.c
<emphasis>(many lines omitted)</emphasis>
gcc -shared -nostartfiles -o nsopenssl.so nsopenssl.o config.o init.o ssl.o thread.o tclcmds.o -L/usr/local/ssl/lib -lssl -lcrypto
[root@yourserver nsopenssl-2.1]# <userinput>cp nsopenssl.so /usr/local/aolserver/bin</userinput>
[root@yourserver nsopenssl-2.1]# <userinput>cp https.tcl /usr/local/aolserver/modules/tcl/</userinput>
[root@yourserver nsopenssl-2.1]#
<action>cd /usr/local/src/aolserver
tar xzf /tmp/nsopenssl-2.1.tar.gz 
cd nsopenssl-2.1 
make OPENSSL=/usr/local/ssl 
cp nsopenssl.so /usr/local/aolserver/bin 
cp https.tcl /usr/local/aolserver/modules/tcl/</action></screen>
      <para>For Debian (<ulink
      url="http://openacs.org/forums/message-view?message_id=93854">more
      information</ulink>):</para>
<screen><action>apt-get install libssl-dev
make OPENSSL=/usr/lib/ssl</action></screen>
    </sect1>
  </appendix>

<!--
   Local Variables:
   sgml-parent-document: ("../index.xml" "book" "part")
   End:
-->
