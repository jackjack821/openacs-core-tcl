<sect1 id="openacs" xreflabel="Install OpenACS 4">
<title>Install OpenACS 4</title>

  <sect2 id="install-openacs-download">
	<title>Downloading OpenACS</title>

    <itemizedlist>
      <listitem><para> Download the <ulink
		  url="http://www.openacs.org/software">OpenACS 4 software</ulink>
		  to the <computeroutput>/tmp</computeroutput> directory:
        </para></listitem>

      <listitem><para> 
		  Login as <computeroutput>nsadmin</computeroutput> and untar the
		  downloaded components into <computeroutput>/web</computeroutput>
		  directory. The alpha-2 tarball is currently named
		  <computeroutput>alpha2.tgz</computeroutput>. Replace
		  <computeroutput>alpha2.tgz</computeroutput> in the commands below
		  with whatever the current tarball is named.
		</para>

		<programlisting>
joeuser:~$ su - nsadmin
Password: ***********
nsadmin:~$ cd /web
nsadmin:/web$ tar xzf /tmp/alpha2.tgz</programlisting>
      </listitem>

      <listitem><para> 
		  You should now have an
		  <computeroutput>openacs-4/</computeroutput> directory tree in
		  <computeroutput>/web</computeroutput>. Rename this directory to
		  whatever you want your web service to be identified as. The name
		  of your web service is referred to as the
		  <emphasis>service_name</emphasis>. Since you can run multiple
		  separate web services under AOLserver, this identification is
		  used internally by AOLserver to differentiate your services from
		  one another. A service name should be a single word,
		  <emphasis>letters and numbers only</emphasis>. If the name of
		  your site is one word, that would be a good choice. For example
		  &quot;birdnotes&quot; might be the service name for the <ulink
		  url="http://birdnotes.net/">birdnotes.net</ulink>
		  community. We'll use <emphasis>birdnotes</emphasis> as an example
		  in these docs.
		</para>

		<programlisting>
nsadmin:/web$ ls -l
total 4
drwxr-xr-x    8 nsadmin  nsadmin      4096 Nov 27 09:32 openacs-4
nsadmin:/web$ mv openacs-4 <emphasis>birdnotes</emphasis>
nsadmin:/web$ ls -l
total 4
drwxr-xr-x    8 nsadmin  nsadmin      4096 Dec 20 14:37 birdnotes</programlisting>
      </listitem>
    </itemizedlist>

  </sect2>

  <para>
	Skip ahead if you want to <xref
	  linkend="install-openacs-prepare-postgres"/>
  </para>

  <sect2 id="install-openacs-prepare-oracle" xreflabel="Prepare Oracle for OpenACS">
	<title>Prepare Oracle for OpenACS</title>

    <para>You should be logged on as
	  <computeroutput>nsadmin</computeroutput> for this step and you should
	  make sure that <computeroutput>nsadmin</computeroutput> is in the
	  <computeroutput>dba</computeroutput> group.</para>

    <itemizedlist>
      <listitem><para> 
		  Verify nsadmin membership by typing
		  <computeroutput>groups</computeroutput> when you login:

		  <programlisting>
nsadmin:~$ groups
nsadmin dba web</programlisting>

		  If you do not see these groups, take the following action: 

		  <programlisting>
nsadmin:~$ su -      
Password: ************
root:~# usermod -g nsadmin -G dba,web nsadmin</programlisting>

		  If you get an error about an undefined group, then add that group
		  manually:

<programlisting>
root:~# groupadd dba
root:~# groupadd nsadmin
root:~# groupadd web</programlisting>

		  Make sure to logout as <computeroutput>root</computeroutput> when
		  you are finished with this step and log back in as
		  <computeroutput>nsadmin</computeroutput>.
		</para></listitem>

      <listitem><para> 
		  Connect to Oracle using
		  <computeroutput>svrmgrl</computeroutput> and login:
        
		  <programlisting>
nsadmin:~$ svrmgrl

SVRMGR&gt; connect internal
Connected.</programlisting>
		</para></listitem>

      <listitem><para>
		  Determine where the system tablespaces are stored: 

		  <programlisting>
SVRMGR&gt;  select file_name from dba_data_files;</programlisting>
        Example results: 

		  <programlisting>
/ora8/m01/app/oracle/oradata/ora8/system01.dbf
/ora8/m01/app/oracle/oradata/ora8/tools01.dbf
/ora8/m01/app/oracle/oradata/ora8/rbs01.dbf
/ora8/m01/app/oracle/oradata/ora8/temp01.dbf
/ora8/m01/app/oracle/oradata/ora8/users01.dbf
/ora8/m01/app/oracle/oradata/ora8/indx01.dbf
/ora8/m01/app/oracle/oradata/ora8/drsys01.dbf</programlisting>
		</para></listitem>

      <listitem><para> 
		  Using the above output, you should determine where
		  to store your tablespace. As a general rule, you&#39;ll want to
		  store your tablespace on a mount point under the
		  <computeroutput>/ora8</computeroutput> directory that is separate
		  from the Oracle system data files. By default, the Oracle system
		  is on <computeroutput>m01</computeroutput>, so we will use
		  <computeroutput>m02</computeroutput>. This enables your Oracle
		  system and database files to be on separate disks for optimized
		  performance. For more information on such a configuration, see
		  <ulink
		  url="http://www.arsdigita.com/books/panda/databases-choosing">Chapter
		  12</ulink> of <ulink
		  url="http://www.arsdigita.com/books/panda/">Philip&#39;s
		  book</ulink>.  For this example, we&#39;ll use
		  <computeroutput>/ora8/m02/oradata/ora8/</computeroutput>.
		</para></listitem>

      <listitem><para> 
		  Create the directory for the datafile; to do this,
		  exit from <computeroutput>svrmgrl</computeroutput> and login as
		  <computeroutput>root</computeroutput> for this step: </para>

		<programlisting>
SVRMGR&gt; exit
nsadmin:~$ su -
Password: ************
root:~# mkdir -p /ora8/m02/oradata/ora8/
root:~# chown nsadmin.web /ora8/m02/oradata/ora8
root:~# chmod 775 /ora8/m02/oradata/ora8
root:~# exit
nsadmin:~$</programlisting>
      </listitem>

      <listitem><para> 
		  As <computeroutput>nsadmin</computeroutput>, create a tablespace for
		  the service. It is important that the tablespace can
		  <computeroutput>autoextend</computeroutput>. This allows the
		  tablespace&#39;s storage capacity to grow as the size of the data
		  grows. We set the pctincrease to be a very low value so that our
		  extents won&#39;t grow geometrically. We do not set it to 0 at
		  the tablespace level because this would affect Oracle&#39;s
		  ability to automatically coalesce free space in the
		  tablespace. </para>
		<programlisting>
nsadmin:~$ svrmgrl

SVRMGR&gt; connect internal;
SVRMGR&gt; create tablespace <emphasis>birdnotes</emphasis> datafile &#39;/ora8/m02/oradata/ora8/<emphasis>birdnotes</emphasis>01.dbf&#39; size 50m autoextend on default storage (pctincrease 1);</programlisting>
      </listitem>

      <listitem><para> 
		  Create a database user for this service. Give the
		  user access to the tablespace and rights to connect. We'll use
		  <computeroutput>birdnotespassword</computeroutput> as our password.</para>

        <para>
		  Write down what you specify as <emphasis>service_name</emphasis>
			(i.e. <computeroutput>birdnotes</computeroutput>) and
			<emphasis>database_password</emphasis>
			(i.e. <computeroutput>birdnotespassword</computeroutput>). You
			will need this information for configuring exports and
			AOLserver.
		</para>

		<programlisting>
SVRMGR&gt; create user <emphasis>birdnotes</emphasis> identified by <emphasis>birdnotespassword</emphasis> default tablespace <emphasis>birdnotes</emphasis>
temporary tablespace temp quota unlimited on <emphasis>birdnotes</emphasis>;
SVRMGR&gt; grant connect, resource, ctxapp, javasyspriv, query rewrite to <emphasis>birdnotes</emphasis>;
SVRMGR&gt; revoke unlimited tablespace from <emphasis>birdnotes</emphasis>;
SVRMGR&gt; alter user <emphasis>birdnotes</emphasis> quota unlimited on <emphasis>birdnotes</emphasis>;
SVRMGR&gt; exit;</programlisting>

        <para>
		  Your table space is now ready. In case you are trying to delete a
		  previous OpenACS installation, consult these commands in <xref
		  linkend="install-openacs-delete-tablespace"/> below.
		</para></listitem>

      <listitem><para>
        Make sure that you can login to Oracle using your
        <emphasis>service_name</emphasis> account: </para>

		<programlisting>
nsadmin:~$ sqlplus <emphasis>birdnotes</emphasis>/<emphasis>birdnotespassword</emphasis>
SQL&gt; select sysdate from dual;

SYSDATE
----------
2001-12-20

SQL&gt; exit</programlisting>

        <para>
		  You should see today&#39;s date in a format &#39;YYYY-MM-DD.&#39;
		  If you can&#39;t login, try redoing step 1 again. If the date is
		  in the wrong format, make sure you followed the steps outlined in
		  <xref linkend="install-oracle-troubleshooting"/>
		  </para></listitem>

	  <listitem><para>
		  Next we'll set up AOLserver so that it has the proper environment
		  variables set before launching. Download this <ulink
		  url="files/nsd-oracle.txt">nsd-oracle script</ulink> into
		  <computeroutput>/tmp/nsd-oracle.txt</computeroutput> : 
		</para>

		<programlisting>
nsadmin:~$ cp /tmp/nsd-oracle.txt ./bin/nsd-oracle
nsadmin:~$ chmod 700 ./bin/nsd-oracle</programlisting>
	  </listitem>
	</itemizedlist>
  </sect2>

  <sect2 id="install-openacs-prepare-postgres" xreflabel="Prepare PostgreSQL for OpenACS">
	<title>Prepare PostgreSQL for OpenACS</title>
	<para>
	  Preparing PostgreSQL is just a little bit simpler than preparing
	  Oracle. We simply need to create a database with the name of our
	  <emphasis>service-name</emphasis>
	  (i.e. <computeroutput>birdnotes</computeroutput>)
	</para>
	<programlisting>
nsadmin:/web$ createdb <emphasis>birdnotes</emphasis>
CREATE DATABASE</programlisting>

	<para>Next we'll set up AOLserver so that it has the proper environment
	  variables set before launching. Download this <ulink
	  url="files/nsd-postgres.txt">nsd-postgres script</ulink> into
	  <computeroutput>/tmp/nsd-postgres.txt</computeroutput> :</para>
	
	<programlisting>
nsadmin:/web$ cd
nsadmin:~$ cp /tmp/nsd-postgres.txt ./bin/nsd-postgres
nsadmin:~$ chmod 700 ./bin/nsd-postgres</programlisting>

  </sect2>

<sect2 id="install-openacs-configure-aol">
	<title>Configuring AOLserver</title>

    <para>
	  The AOLserver architecture lets you run an arbitrary number of
	  virtual servers. A virtual server is an HTTP service running on a
	  specific port, e.g. port 80. In order for the OpenACS to work, you
	  need to configure a virtual server. Because the process is involved,
	  we have prepared a sample virtual server configuration file.
	</para>

	<orderedlist>
	  <listitem><para> 
		  Download <ulink
			url="files/openacs4.tcl.txt"><computeroutput>openacs4.tcl.txt</computeroutput></ulink>
			into <computeroutput>/tmp</computeroutput>.  
		</para></listitem>

	  <listitem><para> 
		  Modify it for your needs and save it in
		  <computeroutput>/usr/local/aolserver/birdnotes.tcl</computeroutput>
		  (Of course change <computeroutput>birdnotes</computeroutput> to
		  whatever you're using as your <emphasis>service-name</emphasis>
		</para></listitem>
	</orderedlist>

	<programlisting>
nsadmin:~$ cp /tmp/openacs4.tcl.txt ./<emphasis>birdnotes</emphasis>.tcl
nsadmin:~$ chmod 660 <emphasis>birdnotes</emphasis>.tcl
nsadmin:~$ emacs <emphasis>birdnotes</emphasis>.tcl</programlisting>

	<para>
	  Specifically, you'll have set the following variables
	</para>

	<itemizedlist>
	  <listitem><para> 
		  <emphasis>server</emphasis> - This is the name of
		  the directory where your code resides. In our example above, we
		  used <emphasis>birdnotes</emphasis>. 
		</para></listitem>
	  
	  <listitem><para><emphasis>db_name</emphasis> - In almost all cases,
		  this can be kept as a reference to $server. If for some reason,
		  the tablespace you are using is different than your servername,
		  then you can set it here. You should have a good reason for doing
		  this. 
		</para></listitem>

	  <listitem><para> 
		  <emphasis>servername</emphasis> - This is just a
		  *pretty* name for your server. For example, we might call ours
		  &quot;Birdnotes.net Community&quot; 
		</para></listitem>

	  <listitem><para><emphasis>httpport</emphasis> - If you want your
		  server on a different port, enter it here</para></listitem>

	</itemizedlist>

	<para>
	  AOLServer is very configurable. These settings should get you
	  started, but for more options, read the <ulink
	  url="http://aolserver.com/docs/admin/config.adp">AOLServer
	  docs</ulink>.
	</para>

	<para>
	  Kill any current running AOLserver processes and start a new
	  one. (Note, if you are using Oracle, rather than PostgreSQL, replace
	  <computeroutput>nsd-postgres</computeroutput> with
	  <computeroutput>nsd-oracle</computeroutput>): </para>
	<programlisting>
nsadmin:~$ killall nsd
; Should probably see:
nsd: no process killed
nsadmin:~$ /usr/local/aolserver/bin/nsd-postgres -t /usr/local/aolserver/<emphasis>birdnotes</emphasis>.tcl</programlisting>

	<para>
	  Attempt to connect to the service from a web browser as you did
	  in the <xref linkend="install-aolserver-test"/> section. You should
	  specify a URL like:
	</para>
	<programlisting>
http://<emphasis>ip_name</emphasis>:<emphasis>ip_port</emphasis>/</programlisting>

	<para>
	  You should see a page that looks like <ulink
        url="files/openacs-start.html">this</ulink> - if so, go on to <xref
        linkend="install-openacs-using-installer"/>.
	</para>

	<para>
	  If you don&#39;t see the login page, view your error log
        (<computeroutput>/usr/local/aolserver/logs/<emphasis>birdnotes</emphasis>-error.log</computeroutput>)
	  to make sure the service is starting without any problems. If you
	  need to make changes, don&#39;t forget to kill any running
	  servers.
	</para>

	<programlisting>
nsadmin:~$ killall nsd</programlisting>
	
  </sect2>

  <sect2 id="install-openacs-using-installer" xreflabel="Using the OpenACS Installer">
	<title>Using the OpenACS Installer</title>

    <para>
	  Now that you've got AOLserver up and running, let's install OpenACS
	  4.
	</para>

    <itemizedlist>
      <listitem><para> 
		  You should see a page from the webserver titled
		  <computeroutput>OpenACS Installation:
		  Welcome</computeroutput>. You will be warned if your version of
		  the database driver is out of date, if AOLserver cannot connect
		  to the database, if any modules are missing or out-of-date, or if
		  there are any problems with filesystem permissions on the server
		  side. But if everything is fine, you can click
		  <computeroutput>Next</computeroutput> to proceed to load the
		  OpenACS Kernel data model.  
		</para></listitem>

      <listitem><para> 
		  The next page shows the results of loading the OpenACS Kernel
		  data model - be prepared to wait a few minutes as it works. You
		  should see a string of &quot;No errors.&quot; as the tables are
		  created.  You'll see the line:
		</para>

		<programlisting>
Loading package .info files ... this will take a few minutes</programlisting>

		<para>
		  This will really take a few minutes. Have faith! Finally,
		  another <computeroutput>Next</computeroutput> button will appear at
		  the bottom - click it.
		</para>
	  </listitem>

      <listitem><para> 		  
		  The following page shows the results of loading the package data
		  models. You should see positive results for each of the
		  previously selected packages, but watch out for any
		  errors. Eventually, the page will display &quot;Generating secret
		  tokens&quot; and then &quot;Done&quot;- click
		  <computeroutput>Next</computeroutput>.  
		</para></listitem>

      <listitem><para>
		  You should see a page, &quot;OpenACS Installation: Create
		  Administrator&quot; with form fields to define the OpenACS site
		  administrator. Fill out the fields as appropriate, and click
		  <computeroutput>Create User</computeroutput>.  
		</para></listitem>

      <listitem><para>
		  You should see a page, &quot;OpenACS Installation: Set System
		  Information&quot; allowing you to name your service. Fill out the
		  fields as appropriate, and click <computeroutput>Set System
		  Information</computeroutput> 
		</para></listitem>

      <listitem><para> 
		  You&#39;ll see the final Installer page, &quot;OpenACS
		  Installation: Complete.&quot; It will tell you that the server is
		  being restarted; note that unless you already set up a way for
		  AOLServer to restart itself (ie. inittab or daemontools),
		  you&#39;ll need to manually restart your service.
		</para>

		<programlisting>
nsadmin:~$ /usr/local/aolserver/bin/nsd-postgres -t /usr/local/aolserver/<emphasis>birdnotes</emphasis>.tcl</programlisting>
	  </listitem>

      <listitem><para> 
		  Give the server a few minutes to start up. Then
		  reload the final page above. You should see the front page, with
		  an area to login near the upper right.  Congratulations, OpenACS
		  4 is now up and running!  
		</para></listitem>
    </itemizedlist>
	
  </sect2>

  <sect2 id="install-openacs-keepalive" xreflabel="Keep AOLServer alive">
	<title>Keep AOLserver alive</title>

	<para>
	  Now, we'll describe how to start AOLserver automatically on boot,
	  or whenever else the service dies.
	</para>

    <para>
	  There are 2 ways of doing this - via inittab or via daemontools. The
	  second way is by far the better way. Using daemontools gives you much
	  finer control over your servers and avoids the hassle of messing with
	  <computeroutput>/etc/inittab</computeroutput>. But, we'll describe
	  the inittab way as this may be easier for some users. I encourage
	  everyone to follow the links provided which describe how to <xref linkend="install-openacs-daemontools"/>.
	</para>

	<para><emphasis>Important:</emphasis> You need to set up
	  <emphasis>either</emphasis> inittab or daemontools, not both!</para>

	<sect3 id="install-openacs-inittab" xreflabel="Editing inittab">
	  <title>Editing inittab</title>

	  <para>
		This step should be completed as root. This can break every service
		on your machine, so proceed with caution.
	  </para>

	  <itemizedlist>
		<listitem><para>
			There are 2 general steps to getting this working. 
		  </para>
		  <orderedlist>
			<listitem><para> 
				Install a script called
				<computeroutput>restart-aolserver</computeroutput>. This
				script doesn't actually restart AOLserver - it just kills
				it.  
			  </para></listitem>

			<listitem><para>
				Ask the OS to restart our service whenever it's not
				running. We do this by adding a line to
				<computeroutput>/etc/inittab</computeroutput>.
			  </para></listitem>
		  </orderedlist>

		  <para>
			Calling <computeroutput>restart-aolserver</computeroutput>
			kills our service. The OS notices that our service is not
			running, so it automatically restarts it. Thus, calling
			<computeroutput>restart-aolserver</computeroutput> effectively
			restarts our service.  
		  </para></listitem>

		<listitem><para> 
			Copy this <ulink
			  url="files/restart-aolserver.txt">file</ulink> into
			<computeroutput>/tmp/restart-aolserver.txt</computeroutput>.
		  </para></listitem>

		<listitem><para> 
			This script needs to be SUID-root, which means
			that the script will run as root. This is necessary to ensure
			that the AOLserver processes are killed regardless of who owns
			them. However the script should be executable by the
			<computeroutput>web</computeroutput> group to ensure that the
			users updating the web page can use the script, but that
			general system users cannot run the script. You also need to
			have Perl installed and also a symbolic link to it in
			<computeroutput>/usr/local/bin</computeroutput>. 
		  </para>
		<programlisting>
nsadmin:~$ su - 
Password: ***********
root:~# cp /tmp/restart-aolserver.txt /usr/local/bin/restart-aolserver
root:~# chown root.web /usr/local/bin/restart-aolserver
root:~# chmod 4750 /usr/local/bin/restart-aolserver
root:~# ln -s /usr/bin/perl /usr/local/bin/perl
root:~# exit</programlisting>
      </listitem>

      <listitem><para> 
			Test the <computeroutput>restart-aolserver</computeroutput>
			script. We'll first kill all running servers to clean the
			slate. Then, we'll start one server and use
			<computeroutput>restart-aolserver</computeroutput> to kill
			it. If it works, then there should be no more servers
			running. You should see the following lines. </para>

		<programlisting>
nsadmin:~$ killall nsd
nsd: no process killed
nsadmin:~$ /usr/local/aolserver/bin/nsd-postgres -it /usr/local/aolserver/<emphasis>birdnotes</emphasis>.tcl
nsadmin:~$ restart-aolserver <emphasis>birdnotes</emphasis>
Killing 23727 
nsadmin:~$ killall nsd
nsd: no process killed</programlisting>

		<para>
			The number 23727 indicates the process id(s) (PIDs) of the
			processes being killed. It is important that <emphasis
			role="strong">no processes are killed</emphasis> by the second
			call to <computeroutput>killall</computeroutput>. If there are
			processes being killed, it means that the script is not
			working.</para></listitem>

      <listitem><para> 
		  Assuming that the <computeroutput>restart-aolserver</computeroutput>
		  script worked, login as root and open
		  <computeroutput>/etc/inittab</computeroutput> for
		  editing. </para>
		<programlisting>
nsadmin:~$ su -
Password: ************
root:~# emacs -nw /etc/inittab</programlisting>
      </listitem>

      <listitem><para> 
			Copy this line into the bottom of the file as a template,
			making sure that the first field
			<computeroutput>nss1</computeroutput> is unique.
		  </para>
		  <programlisting>
nss1:2345:respawn:/usr/local/aolserver/bin/nsd-postgres -i -u nsadmin -g web -t /usr/local/aolserver/<emphasis>birdnotes</emphasis>.tcl</programlisting>
		</listitem>

		<listitem><para>
			<emphasis role="strong">Important:</emphasis> Make sure there is a
			newline at the end of the file. If there is not a newline at
			the end of the file, the system may suffer catastrophic
			failures.  
		  </para></listitem>

		<listitem><para>
			Still as root, enter the following command to re-initialize
			<computeroutput>/etc/inittab</computeroutput>. </para>

		  <programlisting>
root:~# killall nsd    
nsd: no process killed
root:~# /sbin/init q</programlisting>        
		</listitem>

		<listitem><para> 
			See if it worked by running the
			<computeroutput>restart-aolserver</computeroutput> script
			again. </para>

		  <programlisting>
root:~# restart-aolserver <emphasis>birdnotes</emphasis>
Killing 23750</programlisting>
		</listitem>
	  </itemizedlist>

	  <para>
		If processes were killed, congratulations, your server is now
		automated for startup and shutdown. 
	  </para>
	</sect3>

	<sect3 id="install-openacs-daemontools" xreflabel="Install daemontools">
	  <title>Install daemontools</title>

	  <para>

		Installation instructions:

		<variablelist>
		  <varlistentry>
			<term>Debian</term>
			<listitem><para>
				<programlisting>
root:~# apt-get install daemontools-installer
root:~# build-daemontools
root:~# # answer 'yes' when asked to create symlink from /service to /var/lib/svscan</programlisting>
			  </para></listitem>
		  </varlistentry>

			<varlistentry>
			  <term>Red Hat</term>
			  <listitem><para>RPMs for RH 6.2 and RPM 7.1 are available
			  <ulink
			  url="http://untroubled.org/rpms/daemontools/">http://untroubled.org/rpms/daemontools</ulink>. I
			  have not tested these, so I have no idea whether they work
			  properly.
				</para></listitem>
			</varlistentry>

		  <varlistentry>
			<term>Other distributions</term>
			<listitem><para>

				You can download the source directly from the author's site
				at <ulink
				url="http://cr.yp.to/daemontools/install.html">http://cr.yp.to/daemontools/install.html</ulink>.

			  </para></listitem>				
		  </varlistentry>				

		</variablelist>
	  </para>

	  <para>
		Create a file called <computeroutput>run</computeroutput> inside
		<computeroutput>/web/<emphasis>birdnotes</emphasis></computeroutput>:
	  </para>

	  <programlisting>
nsadmin:~$ cd /web/birdnotes
nsadmin:/web/birdnotes$ emacs run</programlisting>

	  <para>
		Copy this text into that file:
	  </para>

	  <programlisting>
#!/bin/sh 

exec /usr/local/aolserver/bin/nsd-postgres -it /usr/local/aolserver/birdnotes.tcl -u nsadmin -g web</programlisting>
	  
	  <para>
		As root, change the ownership of this file:
	  </para>

	  <programlisting>
nsadmin:/web/birdnotes$ su -
Password: ***********
root:~# chown root.root /web/birdnotes/run
root:~# chmod 700 /web/birdnotes/run</programlisting>

	  <para>
		Now, we'll link our web root to the
		<computeroutput>/service</computeroutput> directory. This causes
		daemontools to monitor this directory. It should find your
		<computeroutput>run</computeroutput> script and run it as soon as
		you hit return.
	  </para>

	  <programlisting>
root:~# killall nsd
root:~# ln -s /web/birdnotes /service
root:~# ps -A | grep nsd
19359 pts/3    00:00:08 nsd
19361 pts/3    00:00:00 nsd
19362 pts/3    00:00:00 nsd
19363 pts/3    00:00:00 nsd
19364 pts/3    00:00:00 nsd</programlisting>

	  <para>
		At this point, you should be able to use the
		<computeroutput>restart-aolserver</computeroutput> script described
		in <xref linkend="install-openacs-inittab"/>. Daemontools, however,
		allows you much more precision control.
	  </para>

	  <itemizedlist>
		<listitem><para>
			<computeroutput>svc -d /web/birdnotes</computeroutput> - Bring
			the server down
		  </para></listitem>

		<listitem><para>
			<computeroutput>svc -u /web/birdnotes</computeroutput> - Start
			the server up. Also, restart it whenever it stops.
		  </para></listitem>

		<listitem><para>
			<computeroutput>svc -o /web/birdnotes</computeroutput> - Start
			the server up once. Do not restart it if it stops.
		  </para></listitem>

		<listitem><para>
			<computeroutput>svc -t /web/birdnotes</computeroutput> - Stop
			and immediately restart the server
		  </para></listitem>

		<listitem><para>
		
			<computeroutput>svc -k /web/birdnotes</computeroutput> - Sends
			the server a KILL signal. This is like KILL -9. AOLserver exits
			immediately. If svc -t fails to fully kill AOLserver, use this
			option.

		  </para></listitem>
	  </itemizedlist>

	  <para>
		At this point, these commands will work only for the
		<computeroutput>root</computeroutput> user. We can give a group
		permission to run these commands as well. Download this <ulink
		url="files/svgroup.txt">script</ulink> to
		<computeroutput>/tmp</computeroutput>.
	  </para>

	  <programlisting>
root:~# cp /tmp/svgroup.txt /usr/local/bin/svgroup
root:~# chmod 755 /usr/local/bin/svgroup
root:~# svgroup web /service/birdnotes</programlisting>

	  <para>
		This command will give the <computeroutput>web</computeroutput>
		group permission to use <computeroutput>svc</computeroutput> commands
		on the <emphasis>birdnotes</emphasis> server.
	  </para>

	  <para>
		Try it out. You may want to <computeroutput>tail -f
		/usr/local/aolserver/log/birdnotes-error.log</computeroutput> in
		another window, so you can see what happens when you type these
		commands.
	  </para>

	  <programlisting>
root:~# exit
nsadmin:~$ # first, bring the server down
nsadmin:~$ svc -d /web/birdnotes
nsadmin:~$ # now, start the server up
nsadmin:~$ svc -u /web/birdnotes
nsadmin:~$ # wait for server to come up, then restart it
nsadmin:~$ svc -t /web/birdnotes</programlisting>

	  <para>
		Most of this information comes from Tom Jackson's <ulink
		  url="http://zmbh.com/discussion/svc/aolserver+daemontools.html">AOLServer+Daemontools
		  Mini-HOWTO</ulink>.
	  </para>
	</sect3>
  </sect2>

  <sect2 id="install-openacs-port80">
	<title>Running AOLserver on Port 80</title>
	<para>
	  If you want to run the service on port 80 (the default HTTP port),
	  you need to set the port to 80 in your
	  <computeroutput>service_name.tcl</computeroutput> file in
	  <computeroutput>/usr/local/aolserver</computeroutput>. 
	</para>

	<para>
	  Moreover, you will need to start the service as
	  <computeroutput>root</computeroutput>. If you follow the instructions
	  above for <link linkend="install-openacs-keepalive">automating
	  startup</link>, this will be taken care of, but if you ever start the
	  server from the command line, be sure to <computeroutput>su
	  -</computeroutput> first.
	</para>

    <para>
	  Port 80 is a <emphasis>privileged</emphasis> port. Only certain users
	  can claim it. When you start <computeroutput>nsd</computeroutput> as
	  root, it obtains the port, and then changes to run as whatever user
	  you specify in the server configuration file. This ensures a high
	  level of security, as the server, once started, is not running as
	  <computeroutput>root</computeroutput>. This mean that if someone was
	  able to exploit your web server to execute a command on your server,
	  they would not be able to gain <computeroutput>root</computeroutput>
	  access.</para>
  </sect2>

  <sect2 id="install-openacs-delete-tablespace">
	<title>Deleting a tablespace</title>

	<para>Skip down for instructions on <xref linkend="install-openacs-delete-postgres-tablespace"/>.
	</para>

	<sect3 id="install-openacs-delete-oracle-tablespace">
	  <title>Deleting an Oracle tablespace</title>

	  <para>
		Should it become necessary to rebuild a tablespace from scratch,
		you can use the <computeroutput>drop user</computeroutput> command
		in SVRMGRL with the <computeroutput>cascade</computeroutput>
		option. This command will drop the user and every database object
		the user owns.</para>

	  <programlisting>
SVRMGR&gt; drop user <emphasis>birdnotes</emphasis> cascade;</programlisting>

	  <para>
		If this does not work because svrmgrl &quot;cannot drop a user that
		is currently connected&quot;, make sure to kill the AOLserver using
		this user. If it still does not work, do:</para>

	  <programlisting>
SVRMGR&gt; select username, sid, serial# from v$session where username=&#39;<emphasis>birdnotes</emphasis>&#39;;</programlisting>

	  <para>and then</para>
	  <programlisting>
SVRMGR&gt; alter system kill session &#39;<emphasis>sid</emphasis>,<emphasis>serial#</emphasis>&#39;;</programlisting>

	  <para>
		where <emphasis>sid</emphasis> and <emphasis>serial#</emphasis> are
		replaced with the corresponding values for the open session.</para>

	  <para><emphasis role="strong">Use with caution!</emphasis></para>

	  <para>
		If you feel the need to delete <emphasis>everything</emphasis>
		related to the service, you can also issue the following:</para>
	  <programlisting>
SVRMGR&gt; drop tablespace <emphasis>birdnotes</emphasis> including contents cascade constraints;</programlisting>   
	</sect3>

	<sect3 id="install-openacs-delete-postgres-tablespace" xreflabel="Deleting a PostgreSQL tablespace">
	  <title>Deleting a PostgreSQL tablespace</title>

	  <para>
		Dropping a PostgreSQL tablespace is easy. You have to stop any
		AOLserver instances that are using the database that you wish to
		drop. If you're using daemontools, this is simple, just use the
		'down' flag (-d). If you're using inittab, you have to comment out
		your server in <computeroutput>/etc/inittab</computeroutput>,
		reread the inittab with <computeroutput>/sbin/init
		q</computeroutput>, and then <computeroutput>restart-aolserver
		<emphasis>birdnotes</emphasis></computeroutput>.</para>
	
	  <para>Then, to drop the db, just do:</para>
	  <programlisting>
nsadmin:~$ dropdb <emphasis>birdnotes</emphasis>
DROP DATABASE</programlisting>
	</sect3>
  </sect2>

  <para><phrase role="cvstag">($Id$)</phrase></para>
</sect1>

