<?xml version='1.0' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [

<!ENTITY % myvars SYSTEM "variables.ent">
%myvars;
]>

<chapter id="releasing-openacs">
  <title>How to package and release OpenACS</title>
    <orderedlist>
      <listitem>
        <para>Update version numbers:</para>
        <orderedlist>
          <listitem>
            <para>Update /packages/acs-core-docs/www/xml/variables.ent with the new version number.
            </para>
          </listitem>
          <listitem>
            <para>Add new section in /packages/acs-core-docs/www/xml/for-everyone/release-notes.xml
</para>
          </listitem>
          <listitem>
            <para>Regenerate all HTML docs</para>
          </listitem>
          <listitem>
            <para>Update /readme.txt with the new version number</para>
          </listitem>
          <listitem>
            <para>Update version number in all of the core packages.  Here's a bash/perl script which works but could be made easier to use.  Run it from the tarball root:</para>
          <programlisting>#!/bin/sh
# run this file from ../packages to renumber all .info version numbers

#---------------------------------------------------------------------
# here's what we're looking for
#---------------------------------------------------------------------
#   &lt;version name="5.1.0d1" url="http:blahblah/acs-kernel-5.1.0d1.apm"&gt;
#      &lt;provides url="acs-kernel" version="5.1.0d1"/&gt;
#---------------------------------------------------------------------
# here's what we don't want to touch
#---------------------------------------------------------------------
#      &lt;requires url="acs-kernel" version="5.0.0b4"/&gt;
#---------------------------------------------------------------------

for dir in `find -name *.info`
  do
  perl -p -i -e 's/name="5\.0\.0"/name="5\.1\.0d1"/' $dir
  perl -p -i -e 's/-5\.0\.0.apm"/-5\.1\.0d1.apm"/' $dir
  perl -p -i -e 's/(provides.*version)="5\.0\.0"/\1="5\.1\.0d1"/' $dir
done</programlisting>
        </listitem>
          <listitem>
            <para>Rebuild the Changelog.  I use a tool called cvs2cl.  Run this command from the package root to automatically generate a Changelog file  in the same dir:</para>
            <screen>cd /var/log/aolserver/service0
perl /var/tmp/cvs2cl/cvs2cl.pl -F oacs-5-0 --delta openacs-5-0-0-final:oacs-5-0</screen>
          </listitem>
          <listitem>
            <para>
              Commit changes
            </para>
          </listitem>
        </orderedlist>
      </listitem>
      <listitem>
        <para>Check out OpenACS Core.  The files must be checked
          out through a cvs account with write access and should be a
          checkout from the release branch.  In this example, we are assuming
          this is being done as a local user on openacs.org (which make the 
          checkout and tagging operations much faster).</para>
        <screen><action>cd /var/tmp
cvs -d /cvsroot checkout -r <replaceable>oacs-5-0</replaceable> acs-core</action></screen>
        <para>Repeat with the dotlrn cvs tree.</para>
        <screen><action>cd /var/tmp
mkdir dotlrn-packages
cd dotlrn-packages
cvs -d /dotlrn-cvsroot checkout -r <replaceable>dotlrn-2-0</replaceable> dotlrn-all
</action></screen>
      </listitem>
      <listitem>
        <para>Tag the tree.  If it's a final release of core, move or create the appropriate openacs-major-minor-compat tag.  (Ie, if releasing 5.0.3 final, move the openacs-5-0-compat flag.)</para>
        <screen><action>cd /var/tmp/openacs-4
cvs tag -F <replaceable>openacs-5-0-0a1</replaceable>
cvs tag -F <replaceable>openacs-5-0-compat</replaceable>
</action></screen>
        <tip>
          <title>Branching</title>
          <para>When we feature-freeze on HEAD as part of the release process, we are blocking new development.  To avoid this, we branch the code at this point, so that new work can continue on HEAD while the branch is stabilized for release. However, branching means that bug fixes have to be synchronized between HEAD and the branch, and bug fixes tend to be more frequent right at this time.  Therefore, our actual branch point is as late as possible - essentially, we do not branch until and unless new feature work is actively blocked by the feature freeze.  Branching is almost the same as tagging, except for the flag and slightly different tag nomenclature.  To see the list of old branches, <computeroutput>cvs status -v somefile</computeroutput>.</para>
        <screen>cvs tag -b oacs-5-0</screen>
        </tip>
        <para>Tag dotLRN.  Since the dotLRN packages aren't all in one
          module, we iterate through all of the modules.  Log in first
          (cvs login) so that you don't have to log in for each
          module.</para>
        <screen><action>cd /var/tmp/dotlrn-packages
for dir in *; do ( cd $dir &amp;&amp; cvs tag -F <replaceable>dotlrn-2-0-0a1</replaceable> ); done
</action></screen>
        <para>Note that we use the <action>-F</action> flag which will force the tag to the new version (just in 
          case someone has created the tag already on another version).  Excercise care when doing this since 
          you don't want to inadvertently move a prior release tag.  Also if the tagging goes horribly wrong 
          for some reason you can delete the tag via "<command>cvs tag -d &lt;symbolic_tag&gt;</command>".</para>
      </listitem>
      <listitem>
        <para>Make the tarball</para>
        <itemizedlist>
          <listitem>
            <formalpara>
              <title>openacs-core</title>
              <para></para>
            </formalpara>
            <orderedlist>
              <listitem>
                <para>Go to a new working space and export the tagged files.</para>
            <screen><action>mkdir /var/tmp/tarball
cd /var/tmp/tarball
cvs -d /cvsroot export -r <replaceable>openacs-5-0-0a1</replaceable> acs-core</action></screen>
              </listitem>
              <listitem>
                <para>Generate the tarball.</para>
            <screen><action>cd /var/tmp/tarball
mv openacs-4 openacs-<replaceable>5.0.0a1</replaceable>
tar cz -f <replaceable>openacs-5.0.0a1.tar.gz</replaceable> openacs-<replaceable>5.0.0a1</replaceable>
</action></screen>
              </listitem>
            </orderedlist>
          </listitem>
          <listitem>
            <formalpara>
              <title>dotlrn</title>
              <para></para>
            </formalpara>
            <orderedlist>
              <listitem>
                <para>Go to a new working space and export the tagged
                files. (was getting errors here trying to use -d, so
                gave up and just moved things from openacs-4 to
                openacs at the end)</para>
            <screen><action>mkdir /var/tmp/dotlrn-tarball
cd /var/tmp/dotlrn-tarball
cvs -d /cvsroot export -r <replaceable>openacs-5-0-0a1</replaceable> acs-core
cd /var/tmp/dotlrn-tarball/openacs-4/packages
cvs -d /cvsroot export -r <replaceable>openacs-5-0-0a1</replaceable> dotlrn-prereq
cvs -d /dotlrn-cvsroot export -r <replaceable>dotlrn-2-0-0a1</replaceable> dotlrn-core
</action></screen>
              </listitem>
              <listitem>
                <para>Copy the dotlrn install.xml file, which controls
                which packages are installed on setup, to the root
                location:</para>
                <screen><action>cp /var/tmp/dotlrn-tarball/openacs-4/packages/dotlrn/install.xml \
   /var/tmp/dotlrn-tarball/openacs-4
</action></screen>
              </listitem>


              <listitem>
                <para>Generate the tarball</para>
            <screen><action>cd /var/tmp/dotlrn-tarball
mv openacs-4 dotlrn-<replaceable>2.0.0a1</replaceable>
tar cz -f <replaceable>dotlrn-2.0.0a1.tar.gz</replaceable> dotlrn-<replaceable>2.0.0a1</replaceable>
</action></screen>
              </listitem>
            </orderedlist>
          </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>Test the new tarball</para>
      </listitem>
      <listitem>
        <para>Update openacs.org frontpage, bug-tracker versions, project page, etc.</para>
      </listitem>
      <listitem>
        <para>Clean up after yourself.</para>
        <screen><action>cd /var/tmp
rm -rf tarball dotlrn-tarball dotlrn-packages openacs-<replaceable>5.0.0a1</replaceable></action></screen>
      </listitem>
    </orderedlist>

    <para>
      Here is a shell script that automates packaging the tarball:
    </para>

    <programlisting><xi:include href="../../../../etc/install/build-release.sh" xi:parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"><xi:fallback>release script missing</xi:fallback></xi:include></programlisting>

    <para><phrase role="cvstag">($Id$)</phrase></para>

    <section id="update-repository">
        <title>How to Update the OpenACS.org repository</title>
    <orderedlist>
      <listitem>
        <para>
          Setup a local OpenACS server running 5.0 or better.
        </para>
      </listitem>
      <listitem>
        <para>
          Edit <computeroutput>packages/acs-admin/www/apm/build-repository.tcl</computeroutput> and adjust the Configuration Settings.        </para>
      </listitem>
      <listitem>
        <para>
          Request /acs-admin/apm/build-repository on your new server.
        </para>
      </listitem>
      <listitem>
          <orderedlist>
			<listitem>	
              <para>
          The page will find all branches in the cvs repository labeled oacs-x-y, and build a repository channel for each of
          those branches where x>=5 (so not for 4.6 and earlier).  It will also build a channel for HEAD,
          which will be named after what you set in 'head_channel' above.
              </para>
      	</listitem>  	
        <listitem>
        <para>
          For each channel, it'll do an anonymous checkout of packges and contrib/packages, then build .apm files for each package in the checkout.
        </para>
      </listitem>
      <listitem>
        <para>
          The files will be stored on the server's hard drive in the directory specified by the 'repository_dir' variable in the page script, by default "[acs_root_dir]/www/repository/".
        </para>
      </listitem>
          </orderedlist>
      </listitem>
      <listitem>
        <para>
          If you're on openacs.org, everything should now be fine. Otherwise, you need to move the entire directory tree to openacs.org:/web/openacs/www/repository, replacing what was already there.
        </para>
      </listitem>
    </orderedlist>
    </section>

    <section id="update-translations">
        <title>How to Update the translations</title>
        <orderedlist>
          <listitem>
            <para>
              Update the translation server.  (Approach 1: upgrade to the last release; approach 2: upgrade to head or to an alpha or beta release.)  Use CVS up.
            </para>
          </listitem>
          <listitem>
            <para>Go to <ulink url="/acs-lang/admin">ACS Lang admin page</ulink> and click "Import All Messages"</para>
          </listitem>
          <listitem>
            <para>Resolve conflicts, if any, on the provided page, if any.
            </para>
          </listitem>
          <listitem>
            <para>Back on the admin page, click the export link.  If there are conflicts, the messages will be exported anyway and errors will be shown.</para>
          </listitem>
          <listitem>
            <para>
              Run the acs-lang/bin/check-catalog.sh script.  (This checks for keys no longer in use and some other things.  Until it is rolled into the UI, do it manually and check the results and take whatever steps you can intuit you should do.)
            </para>
          </listitem>
          <listitem>
        <para>CVS commit the catalog files.  Done</para>
          </listitem>
        </orderedlist>
    </section>
</chapter>
  