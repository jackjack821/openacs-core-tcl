<?xml version='1.0' ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY % myvars SYSTEM "../variables.ent">
%myvars;
]>
  <sect1 id="tutorial-database">
    <title>Setting Up Database Objects</title>
    
    <authorblurb>
      <para>by <ulink url="mailto:joel@aufrecht.org">Joel Aufrecht</ulink></para>
    </authorblurb>
    
    <sect2>
      <title>Code the data model</title>
      <para>We create all database objects with scripts in the
      <computeroutput>myfirstpackage/sql/</computeroutput> directory.  All
      database scripts are database-specific and are thus in either
      the <computeroutput>myfirstpackage/sql/oracle</computeroutput> or
      <computeroutput>myfirstpackage/sql/postgresql</computeroutput>.
      Packages can support Oracle, PostgreSQL, or both.  In this
      tutorial, we'll work only with PostgreSQL</para>
      <para>The first file will be
      <computeroutput>myfirstpackage-create.sql</computeroutput>.  The
      package manager requires a file with the name
      <computeroutput><replaceable>packagekey</replaceable>-create.sql</computeroutput>,
      which it will run automatically when the package in installed.
      This file should create all tables and views.</para>

      <para>Our package is going to store all of its information in
      one table.  It takes more than just a <computeroutput>CREATE
      TABLE</computeroutput> command, however, because we want to
      integrate our table with the OpenACS system.  By making each
      record in our table an OpenACS object, we gain access to the
      permissions system and to services that integrate with OpenACS
      objects, such as <computeroutput>general-comments</computeroutput> and <computeroutput>notification</computeroutput>. The cost
      that our table creation code must include several functions and
      stored procedures and is fairly complicated even for a simple
      table.  </para>
    <para>There are many kinds of OpenACS objects in the system.  (You
      can see them with <computeroutput> select object_type from
      acs_object_types;</computeroutput>.)  One such object is the
      content_item, which is part of the content repository system.
      We will make our data objects children of the content_item
      object.  Not only will we gain the benefits of both OpenACS
      Objects and content objects, we can also use some content
      repository functions to simplify our database creation.  (<ulink url="objects.html">More
      information about ACS Objects</ulink>.  <ulink
      url="/doc/acs-content-repository">More information about the
      Content Repository</ulink>.)
</para>
      <para>The top of each sql file has some
      standard comments, including doc tags such as
      <computeroutput>@author</computeroutput> which will be picked up
      by the API browser.  The string
      <computeroutput>&#36;Id:$</computeroutput> will automatically be
      expanded when the file is checked in to cvs.</para>
<screen>[service0 postgresql]$ <userinput>emacs myfirstpackage-create.sql</userinput></screen>
      <para>Paste this into the file and save and close.</para>
      <figure>
        <title>Database Creation Script - master create file</title>
        <programlisting>--
-- @author rhs@mit.edu
-- @cvs-id &#36;Id:$
--

select content_type__create_type(
    'mfp_note',                    -- content_type
    'content_revision',            -- supertype
    'MFP Note',                    -- pretty_name,
    'MFP Notes',                   -- pretty_plural
    'mfp_notes',                   -- table_name
    'note_id',                     -- id_column
    null                           -- name_method
);

-- necessary to work around limitation of content repository:
select content_folder__register_content_type(-100,'mfp_note','t');

</programlisting>
      </figure>
    <para>The creation script calls a function,
    <computeroutput>content_type__create_type</computeroutput>, which
    in turn creates the necessary database changes to support our data
    object.  Notice the use of "mfp."  This token, derived from "My
    First Package," ensures that our object is unlikely to conflict
    with objects from other packages.</para>

      <para>Create a database file to drop everything if the package
        is uninstalled.</para>
      <screen>[service0 postgresql]$ <userinput>emacs myfirstpackage-drop.sql</userinput></screen>
      <figure>
        <title>Database deletion script</title>
      <programlisting>-- packages/myfirstpackage/sql/myfirstpackage-drop.sql
-- drop script
--
-- @author joel@aufrecht.org
-- @cvs-id &#36;Id:$
--
select content_folder__unregister_content_type(-100,'mfp_note','t');

select content_type__drop_type(
	   'mfp_note',
	   't',
	   't'
    );
</programlisting>
      </figure>
      <para>Run the create script manually to add your tables and functions.</para>
      <screen>[service0 postgresql]$ <userinput>psql -f myfirstpackage-create.sql</userinput>
psql:myfirstpackage-create.sql:14: NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index 'mfp_notes_pkey' for table 'mfp_notes'
psql:myfirstpackage-create.sql:14: NOTICE:  CREATE TABLE will create implicit trigger(s) for FOREIGN KEY check(s)
 content_type__create_type
---------------------------
                         0
(1 row)

[service0 postgresql]$</screen>
      <para>If there are errors, use them to debug the sql file and try again.  If there are errors in the database table creation, you may need to run the drop script to drop the table so that you can recreate it.  The drop script will probably have errors since some of the things it's trying to drop may be missing.  They can be ignored.</para>
      <para>Once you get the same output as shown above, test the drop script:</para>
      <screen>[service0 postgresql]$ <userinput>psql -f myfirstpackage-drop.sql</userinput>
 content_type__drop_type
-------------------------
                       0
(1 row)

[service0 postgresql]$</screen>
    <para>Once both scripts are working without errors, <emphasis>run the create script one last time</emphasis> and proceed.</para>
    </sect2>
  </sect1>
  