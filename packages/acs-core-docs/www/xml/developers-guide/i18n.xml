<sect1 id="i18n" xreflabel="Internationalization">
  <title></title>

  <authorblurb>
    <para>
      By <ulink url="http://www.petermarklund.com/">Peter Marklund</ulink>
      and <ulink url="http://www.pinds.com/">Lars Pind</ulink>
    </para>
  </authorblurb>

  <sect2 id="i18n-introduction">

    <title>Introduction</title>

    <para>
      This document describes how to develop internationalized OpenACS packages.
    </para>

    <para>
      At this point, we've only covered things that involve the
      message catalog: Dynamically picking a chunk of text to spit out
      based on the locale. 
    </para>
    
    <para>
      Each section below consists on one part about how to write
      new internationalized packages, and which explains the details
      of how it works, and then another part that talks about the
      process for internationalizing existing packages.
    </para>
  </sect2>

  <sect2 id="i18n-message-catalog">

    <title>Using the Message Catalog</title>

    <para>
      The following section will tell you how to deal with localizable
      text in ADP files, in TCL files, and in APM Parameters.
    </para>

    <sect3 id="i18n-message-catalog-adps" xreflabel="Internationalized Templates (ADP Files)">
      <title>Template Files (ADP Files)</title>

      <para>
        Internationalizing templates is about replacing human readable
        text in a certain language with intenral message keys, which
        can then be dynamically replaced with real human language in the desired
        locale.
      </para>
      
      <para>
        There are 3 syntaxes to choose from: The short, the verbose,
        and the temporary. Each offer different advantages, but
        generally, what you want to do is use the short notation for
        new packages and use the temporary notation for
        internationalizing old packages, then have the APM translate
        those into the short notation.
      </para>
      
      <itemizedlist>

        <listitem>
          <para>
            The <emphasis role="strong">short</emphasis>:
            #<emphasis>message_key</emphasis>#
          </para>
          <para>
            The advantage of the short syntax is that it's short. It's
            as simple as inserting the value of a variable.
          </para>
        </listitem>

        <listitem>
          <para>
            The <emphasis role="strong">verbose</emphasis>: &lt;trn
            key="<emphasis>message_key</emphasis>"
            locale="<emphasis>locale</emphasis>"&gt;<emphasis>default
            text</emphasis>&lt;/trn&gt;
          </para>
          <para>
            The verbose syntax allows you to specify a default text in
            a certain language. This syntax is not recommended
            anymore, but it can be convenient for development, because
            it still works even if you haven't created the message
            in the message catalog yet, because what it'll do is
            create the message key with the default text from the tag
            as the localized message.
          </para>
        </listitem>

        <listitem>
          <para>
            The <emphasis role="strong">temporary</emphasis>:
            &lt;#<emphasis>message_key</emphasis> <emphasis>original&nbsp;text</emphasis>#&gt;
          </para>
          <para>
            This syntax has been designed to make it easy to
            internationalize existing pages. This is not a syntax that
            stays in the page. As you'll see later, it'll be replaced
            with the short syntax by a special feature of the APM. You
            may leave out the message_key by writing an underscore (_)
            character instead, in which case a message key will be
            auto-generated by the APM.
          </para>
        </listitem>

      </itemizedlist>

      <para>
        We recommend the short notation for new package development.
      </para>
      
    </sect3>

    <sect3 id="i18n-message-catalog-params" xreflabel="Multilingual APM Parameters">

      <title>APM Parameters</title>

      <para>
        Some parameters contain text that need to be localized. In
        this case, instead of storing the real text in the parameter,
        you should use message keys using the short notation above,
        i.e.  <emphasis
        role="strong">#<emphasis>message-key</emphasis>#</emphasis>.
      </para>

      <para>
       In order to avoid clashes with other uses of the hash
         character, you need to tell the APM that the parameter value
         needs to be localized when retrieving it. You do that by saying:
         <emphasis role="strong">parameter::get -localize</emphasis>.
      </para>

      <para>
        Here are a couple of examples. Say we have the following two
        parameters, taken directly from the dotlrn package.
      </para>

      <table frame="all">
        <tgroup cols="2" colsep="1" rowsep="1">
          <colspec colname="c1"/>
          <colspec colname="c2"/>
          <thead>
            <row>
              <entry>Parameter Name</entry>
              <entry>Parameter Value</entry>
            </row>
          </thead>
          <tbody>
            <row>
               <entry>class_instance_pages_csv</entry>
               <entry>#dotlrn.class_page_home_title#,Simple 2-Column;#dotlrn.class_page_calendar_title#,Simple 1-Column;#dotlrn.class_page_file_storage_title#,Simple 1-Column</entry>
            </row>
            <row>
               <entry>departments_pretty_name</entry>
               <entry>#departments_pretty_name#</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>
        Then, depending on how we retrieve the value, here's what we get:
      </para>
  
      <table frame="all">
        <tgroup cols="2" colsep="1" rowsep="1">
          <colspec colname="c1"/>
          <colspec colname="c2"/>
          <thead>
            <row>
              <entry>Command used to retrieve Value</entry>
              <entry>Retrieved Value</entry>
            </row>
          </thead>
          <tbody>
            <row>
               <entry>parameter::get <emphasis role="strong">-localize</emphasis> -parameter class_instances_pages_csv</entry>
               <entry>Kurs Startseite,Simple 2-Column;Kalender,Simple 1-Column;Dateien,Simple 1-Column</entry>
            </row>
            <row>
               <entry>parameter::get <emphasis role="strong">-localize</emphasis> -parameter departments_pretty_name</entry>
               <entry>Abteilung</entry>
            </row>
            <row>
               <entry>parameter::get -parameter departments_pretty_name</entry>
               <entry>#departments_pretty_name#</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
  
      <para>
        The value in the rightmost column in the table above is the
        value returned by an invocation of parameter::get. Note that
        for localization to happen you must use the -localize flag.
      </para>
      
      <para>
        The locale used for the message lookup will be the locale of
        the current request, i.e. lang::conn::locale or ad_conn
        locale.
      </para>
      
      <para>
        You're responsible for creating the keys in the message
        catalog yourself.
      </para>

    </sect3>

  </sect2>


  <sect2 id="i18n-date-time-number">

    <title>Dates, Times, and Numbers</title>

    <para>
      Let's deal with dates and times first. The way it works is as follows:
    </para>

    <orderedlist>

      <listitem>
        <para>
          Get the date in ANSI format from the database (YYYY-MM-DD
          HH24:MI:SS, the time portion is optional). Name the column
          in the SQL statement something that ends in
          &quot;_ansi&quot;, such as
          &quot;posting_date_ansi&quot;. Example:
          <computeroutput>to_char(posting_date, 'YYYY-MM-DD
          HH24:MI:SS') as posting_date_ansi</computeroutput>
        </para>
      </listitem>

      <listitem>
        <para>
          Use the Tcl command &quot;lc_time_fmt&quot; to format the
          date in pretty format. There are a number of standard,
          localizable formats to choose from (see below). Example:
          <computeroutput>set posting_date_pretty [lc_time_fmt
          $posting_date_ansi &quot;%q&quot;]</computeroutput>
        </para>
      </listitem>

      <listitem>
        <para>
          Use the &quot;*_pretty&quot;-version in your ADP page.
        </para>
      </listitem>

    </orderedlist>

    <para>
      Here's the list of standard date and time formats to choose
      from:
    </para>

    <itemizedlist>

      <listitem>
        <para>
          %c: Long date and time (Mon November 18, 2002 12:00 AM)
        </para>
      </listitem>

      <listitem>
        <para>
          %x: Short date (11/18/02)
        </para>
      </listitem>

      <listitem>
        <para>
          %X: Time (12:00 AM)
        </para>
      </listitem>

      <listitem>
        <para>
          %q: Long date without weekday (November 18, 2002)
        </para>
      </listitem>

      <listitem>
        <para>
           %Q: Long date with weekday (Monday November 18, 2002)
        </para>
      </listitem>

    </itemizedlist>
    
    <para>
      If the abbreviations seem a bit strange, it's because they
      are. Most of them are standardized (see <computeroutput>man
      strftime</computeroutput> for example). %q and %Q are our
      proprietary additions, and 'q' was just about the only letter
      left in the alphabet.
    </para>

    <para>
      The command 'lc_fmt_time' allows you to pass in a specific date
      and time format as well, but please don't, because the whole
      point is to make it possible for administrators to change date
      and time formats site-wide based on locales.
    </para>
    
    <para>
      Numbers are very easy to format. Just say
      <computeroutput>lc_numeric $value</computeroutput>, and it'll
      format the number using the appropriate decimal point and
      thousand separator for the locale.
    </para>
    
  </sect2>



  <sect2 id="i18n-convert" xreflabel="Internationalizing Existing Packages">

    <title>Internationalizing Existing Packages</title>

    <sect3 id="i18n-convert-adp-tcl-files" xreflabel="Internationalizing Existing Pages Files (ADP and Tcl Files)">
      <title>Page Files (ADP and Tcl Files) </title>
    
      <para>
        We've created a couple of tools especially for
        internationalizing the pages of existing packages. The tools can
        be accessed from the &quot;Manage Internationalization&quot;
        linked from the package manager page for a package.
      </para>
  
      <para>
        The process consists of four steps:
      </para>
  
      <orderedlist>
  
        <listitem>
          <para>
            <emphasis role="strong">Replace text with tags</emphasis>:
            This is an automated process, which will try to
            automatically locate chunks of translatable text,
            auto-generate a reasonable message key, and surround the
            text with the temporary &lt;#...#&gt; notation mentioned
            above.
          </para>
        </listitem>
  
        <listitem>
          <para>
            <emphasis role="strong">Manually verify each ADP
            file</emphasis>. If necessary, you can add additional
            &lt;#...#&gt; tags, or you can move or remove the ones set
            by the automated step.
          </para>
        </listitem>
  
        <listitem>
          <para>
            <emphasis role="strong">Manually mark up Tcl
            files</emphasis>, marking up translatable text with the
            &lt;#...#&gt; notation.
          </para>
        </listitem>
  
        <listitem>
          <para>
            <emphasis role="strong">Replace tags with keys</emphasis>:
            This is an automated process, which will replace the
            temporary &lt;#...#&gt; notation in both ADP and Tcl files
            with the appropriate notation for the type of file, and
            store the text in the message catalog. You need to run the
            process twice, once for ADP files, and once for Tcl files.
          </para>
        </listitem>
  
      </orderedlist>
      
      <sect4 id="i18n-convert-replace-text-with-tags" xreflabel="Replace Text With Tags Step">
        <title>Replace Text With Tags Step</title>

        <para>
          When you run this step, any modified files are backed up in
          a file with a &quot;.orig&quot; suffix. Those files are
          never overwritten, though, so the .orig file will always be
          the original page file, not the second-to-last file. Running
          this action multiple times is harmless.
        </para>

        <para>
          The system will auto-generate suggested message keys. 
        </para>

        <para>
          ... (WRITE MORE HERE!)
        </para>

      </sect4>

      <sect4 id="i18n-convert-replace-tags-with-keys" xreflabel="Replace Tags With Keys Step">
        <title>Replace Tags With Keys Step</title>

        <para>
          
        </para>

      </sect4>

    </sect3>

    <para>
      Next step is to internationalize parameters that contain
      localizable text. See the section <xref
      linkend="i18n-message-catalog-params"/>.
    </para>

  </sect2>


</sect1>

