<?xml version='1.0' ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY % myvars SYSTEM "../variables.ent">
%myvars;
]>
  <sect1 id="tutorial-pages">
  <title>Creating Web Pages</title>
  
  <authorblurb>
    <para>by <ulink url="mailto:joel@aufrecht.org">Joel Aufrecht</ulink></para>
  </authorblurb>
  
  <sect2>
    <title>Install some API</title>
    <para>As a workaround for missing content-repository functionality, copy a provided file into the directory for tcl files:</para>
    <screen>
    <action>cp <replaceable>/var/lib/aolserver/service1</replaceable>/packages/acs-core-docs/www/files/note-procs.tcl <replaceable>/var/lib/aolserver/service1</replaceable>/packages/myfirstpackage/tcl/</action></screen>
    <para>To make this file take effect, go to the <ulink url="/acs-admin/apm">APM</ulink> and choose "Reload all files" for "MyFirstPackage".</para>
  </sect2>
  <sect2>
    <title>Build the "Index" page</title>
      <para>Each user-visible page in your package has, typically,
      three parts.  The  <computeroutput>tcl</computeroutput> file
      holds the procedural logic for the page, including TCL and
      database-independent SQL code, and does things like
      check permissions, invoke the database queries, and modify
      variables, and the <computeroutput>adp</computeroutput> page
      holds html.  The <computeroutput>-postgres.xql</computeroutput>
      and <computeroutput>-oracle.xql</computeroutput> files contains
      database-specific SQL.  The default page in any directory is
      <computeroutput>index</computeroutput>, so we'll build that
      first, starting with the tcl file:</para>
      <screen>[service0 postgresql]$<userinput> cd /var/lib/aolserver/service0/myfirstpackages/www</userinput>
[service0@yourserver www <userinput>emacs index.tcl</userinput></screen>
      <para>Paste this into the file.</para>      
      <programlisting>ad_page_contract {
    This is the main page for the package.  It displays all of the Notes and provides links to edit them and to create new Notes.

    @author Your Name (you@example.com)
    @cvs-id $Id$
}

set page_title [ad_conn instance_name]
set context [list]

template::list::create \
    -name notes \
    -multirow notes \
    -actions { "Add a Note" note-edit} \
    -elements {
	edit {
	    link_url_col edit_url
	    display_template {
		&lt;img src="/resources/acs-subsite/Edit16.gif" width="16" height="16" border="0"&gt;
	    }
	    sub_class narrow
	}
	title {
	    label "Title"
	}
	delete {
	    link_url_col delete_url 
	    display_template {
		&lt;img src="/resources/acs-subsite/Delete16.gif" width="16" height="16" border="0"&gt;
	    }
	    sub_class narrow
	}
    }

db_multirow \
    -extend {
	edit_url
	delete_url
    } notes notes_select {
	select ci.item_id,
	       n.title
        from   cr_items ci,
               mfp_notesx n
        where  n.revision_id = ci.live_revision
    } {
	set edit_url [export_vars -base "note-edit" {item_id}]
	set delete_url [export_vars -base "note-delete" {item_id}]
    }
</programlisting>

    <para>Now <computeroutput>index.adp</computeroutput>:</para>
    <programlisting>
&lt;master&gt;
  &lt;property name="title"&gt;@page_title;noquote@&lt;/property&gt;
  &lt;property name="context"&gt;@context;noquote@&lt;/property&gt;
&lt;listtemplate name="notes"&gt;&lt;/listtemplate&gt;
    </programlisting>
    <para>Now we create the add/edit page.  If note_id is passed in,
    it edits that note.  Otherwise, it presents a form for adding
    notes.  Edit
    <computeroutput>note-edit.tcl</computeroutput>:</para>
    <programlisting>ad_page_contract {
    This is the main page for the package.  It displays all of the Notes and provides links to edit them and to create new Notes.

    @author Your Name (you@example.com)
    @cvs-id $Id$
 
    @param item_id If present, assume we are editing that note.  Otherwise, we are creating a new note.
} {
    item_id:integer,optional
}

ad_form -name note -form {
    {item_id:key}
    {title:text {label Title}}
} -new_request {
    permission::require_permission -object_id [ad_conn package_id] -privilege create
    set page_title "Add a Note"
    set context [list $page_title]
} -edit_request {
    permission::require_write_permission -object_id $item_id
    mfp::note::get \
	-item_id $item_id \
	-array note_array 

    set title $note_array(title)

    set page_title "Edit a Note"
    set context [list $page_title]
} -new_data {
    mfp::note::add \
	-title $title
} -edit_data {
    mfp::note::edit \
	-item_id $item_id \
	-title $title
} -after_submit {
    ad_returnredirect "."
    ad_script_abort
}</programlisting>
    <para>And <computeroutput>note-edit.adp</computeroutput>:</para>
    <programlisting>&lt;master&gt;
  &lt;property name="title"&gt;@page_title;noquote@&lt;/property&gt;
  &lt;property name="context"&gt;@context;noquote@&lt;/property&gt;
  &lt;property name="focus"&gt;note.title&lt;/property&gt;
  
&lt;formtemplate id="note"&gt;&lt;/formtemplate&gt;</programlisting>
     <para>And the delete page.  Since it has no UI, there is only a
     tcl page, and no adp page.  Edit
<computeroutput>note-delete.tcl</computeroutput>:</para>
    <programlisting>ad_page_contract {
    This deletes a note

    @author Your Name (you@example.com)
    @cvs-id $Id$
 
    @param item_id The item_id of the note to delete
} {
    item_id:integer
}

permission::require_write_permission -object_id $item_id

mfp::note::delete -item_id $item_id

ad_returnredirect "."</programlisting>
    </sect2>
  </sect1>

