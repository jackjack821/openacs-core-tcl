<?xml version='1.0' ?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY % myvars SYSTEM "../variables.ent">
%myvars;
]>
  <sect1 id="tutorial-newpackage">
    <title>Creating a Package</title>
    
    <authorblurb>
      by <ulink url="mailto:joel@aufrecht.org">Joel Aufrecht</ulink>
    </authorblurb>
    
    <sect2>
      <title>Overview</title>
      <para>To start developing new code in OpenACS, we build a new
    package.  A package is a a discrete collection of web
    pages, tcl code, and database tables and procedures.  A package
    can be installed, upgraded, and removed.  It communicates with
    other packages through an API.  This chapter walks you through the
    minimum steps to create a useful package, including writing
      documentation, setting up database tables and procedures,
      writing web pages, debugging, and automatic regression testing.
</para>

  </sect2>

  <sect2><title>Before you begin</title>
    <para>You will need:</para>
    <itemizedlist>
      <listitem><para>A computer with a working installation of OpenACS
	    4.6.  If you don't have this, see <xref linkend="install-overview"/>.
	  </para></listitem>
      <listitem><para>Example files, which are included in the
standard OpenACS &version; distribution.
	  </para></listitem>
    </itemizedlist>
    <figure>
      <title>Assumptions in this section</title>
      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>Fully qualified domain name of your server</entry>
              <entry><replaceable>yourserver.test</replaceable></entry>
            </row>
            <row>
              <entry>URL of your server</entry>
              <entry><replaceable>http://yourserver.test:8000</replaceable></entry>
            </row>

            <row>
              <entry>Name of development account</entry>
              <entry><replaceable>service0</replaceable></entry>
            </row>
            <row>
              <entry>New Package key</entry>
              <entry><replaceable>samplenote</replaceable></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </figure>
  </sect2>

  <sect2>
    <title>Use the APM to initialize a new package</title>
    <para>We use the <ulink url="packages.html">ACS Package Manager</ulink> (APM) to add, remove, and
    upgrade packages.  It handles package meta-data, such as lists of
    files that belong in the package.  Each package is uniquely
    identified by a package key.  To start developing a new
    package, use the APM to create an empty package with our new
    package key, <replaceable>samplenote</replaceable>.  This will create
    the initial directories, meta-information files, and database
    entries for a new package.  (<ulink
    url="apm-requirements.html">More info on APM</ulink>)
</para>
    <orderedlist>
      <listitem>
        <para>Browse to <computeroutput>http://<replaceable>yourserver</replaceable>:8000/acs-admin/apm</computeroutput>.
</para>
      </listitem>
      <listitem>
        <para>Click <computeroutput>Create a New Package</computeroutput>.</para>
        <para>Fill in the fields listed below.  Tab through the rest.
        (Some will change automatically.  Don't mess with those.)
</para>
        <itemizedlist>
          <listitem><para>
              <computeroutput>Package Key</computeroutput>:
              <userinput>samplenote</userinput></para>
            </listitem>
            <listitem><para>
              <computeroutput>Package Name</computeroutput>:
              <userinput>Notes</userinput>
            </para></listitem>
            <listitem><para>
              <computeroutput>Package Plural</computeroutput>:
              <userinput>Notes</userinput></para></listitem>
            <listitem><para>	  
              <computeroutput>Initial Version</computeroutput>:
              <userinput>0.1d</userinput>
            </para></listitem>
            <listitem><para><computeroutput>Summary</computeroutput>:
              <userinput>This is my first package.</userinput>
            </para></listitem>
          </itemizedlist>
          <para>At the bottom, click
        <computeroutput><guibutton>Create Package</guibutton></computeroutput>.
        </para>
      </listitem>
    </orderedlist>
      <para>This creates a package rooted at
          <computeroutput>/web/<replaceable>service0</replaceable>/packages/<replaceable>samplenote</replaceable></computeroutput>.
          This is the "home directory" of our new package, and all
          files in the package will be within this directory.</para>
    </sect2>
    <sect2>
      <title>Mount the package in the site map</title>
      <para>In order to see your work in progress, you must create a
      map between the URL space of incoming requests and the package.
      You do this by mounting the package in the Site Map.  This
      creates a link between the incoming URL and an
      <emphasis>instance</emphasis> of the package.  (<ulink
      url="rp-design.html">More on Site Maps and nodes</ulink>)</para>
      <para>You can have
      multiple instances of a package on one site, each with a
      different URL and different permissions, all sharing the same
      code and tables.  This requires that a package be developed
      <emphasis>package-aware</emphasis>.  You'll see how to do that
      in this tutorial.</para>
      <orderedlist>
        <listitem><para>Browse to
<computeroutput>http://yourserver.test:8000/admin/site-map/</computeroutput>.</para>
        </listitem>
        <listitem>
          <para>Click the <computeroutput><guilabel>new sub
        folder</guilabel></computeroutput> link on the top row in the
        Site Map table.</para>
        </listitem>
        <listitem><para>Type <userinput>note</userinput>
and click <computeroutput><guibutton>New</guibutton></computeroutput>. </para></listitem>
        <listitem><para>This creates a new row called
<computeroutput>note</computeroutput>.  In the new row, click the <computeroutput><guilabel>new
application</guilabel></computeroutput> link</para></listitem>
        <listitem><para>Type <userinput>Sample Note</userinput> where
it says
<computeroutput><guilabel>untitled</guilabel></computeroutput>, choose
<computeroutput><guilabel>Notes</guilabel></computeroutput> from the drop-down list, and
click <computeroutput><guibutton>New</guibutton></computeroutput>.
</para></listitem>
      </orderedlist>
      <para>By mounting the package, we've caused all requests to
      <computeroutput>http://yourserver.test:8000/note</computeroutput>
      to be satisfied from the files at <computeroutput>/web/service0/packages/samplenote/www</computeroutput>.</para>
    </sect2>
    <sect2>
      <title>Write the Requirements and Design Specs</title>
      <para>It's time to document.  For the tutorial we'll use
      pre-written documentation.  When creating a package
      from scratch, start by copying the documentation template from
	<computeroutput>/web/openacs-dev/packages/acs-core-docs/xml/docs/xml/package-documentation-template.xml</computeroutput>
	to
	<computeroutput>yourpackage/www/docs/xml/index.xml</computeroutput>.</para>
      <para>You then edit that file with emacs to write the 
	requirements and design sections, generate the html, and start
	coding.  Store any supporting files, like page maps or schema
      diagrams, in the <computeroutput>www/doc/xml</computeroutput>
      directory, and store png or jpg versions of supporting files in the
	<computeroutput>www/doc</computeroutput> directory.</para>
      <para>For this tutorial, you should instead install the
	pre-written documentation files for the tutorial app.  Log in
      as <replaceable>service0</replaceable>, create the standard
      directories, and copy the prepared documentation:</para>
      <screen>[service0@yourserver service0]$ <userinput>cd /web/service0/packages/samplenote/</userinput>
[service0@yourserver samplenote]$ <userinput>mkdir -p www/doc/xml</userinput>
[service0@yourserver samplenote]$ <userinput>cd www/doc/xml</userinput>
[service0@yourserver xml]$ <userinput>cp /web/service0/packages/acs-core-docs/www/files/samplenote/* .</userinput>
[service0@yourserver xml]$</screen>
      <para> OpenACS uses DocBook for documentation.  DocBook is
	an XML standard for semantic markup of documentation.  That
	means that the tags you use indicate meaning, not intended
	appearance.  The style sheet will determine appearance.  You
      will edit the text in an xml file, and then process the file
      into html for reading.</para>
      <para>Open the file <computeroutput>index.xml</computeroutput>
      in emacs.  Examine the file.  Find the version history (look for the tag
        <computeroutput>&lt;revhistory&gt;</computeroutput>).  Add a
        new record to the document version history.  Look for the
        <computeroutput>&lt;authorgroup&gt;</computeroutput> tag and
        add yourself as a second author.  Save and exit.  For tips on
        editing SGML files in emacs, see <xref
        linkend="docbook-primer"/></para>
      <para>Process the xml file to create html documentation.  The
      html documentation, including supporting files such as pictures,
      is stored in the <computeroutput>www/docs/</computeroutput>
      directory.  A Makefile is provided to generate html from the xml, and copy all of the
      supporting files.  If Docbook is set up correctly, all you need
      to do is:</para>
      <screen>[service0@yourserver xml]$<userinput> make</userinput>
cd .. ; /usr/bin/xsltproc ../../../acs-core-docs/www/xml/openacs.xsl xml/index.xml
Writing requirements-introduction.html for sect1(requirements-introduction)
Writing requirements-overview.html for sect1(requirements-overview)
Writing requirements-cases.html for sect1(requirements-cases)
Writing sample-data.html for sect1(sample-data)
Writing requirements.html for chapter(requirements)
Writing design-data-model.html for sect1(design-data-model)
Writing design-ui.html for sect1(design-ui)
Writing design-config.html for sect1(design-config)
Writing design-future.html for sect1(design-future)
Writing filename.html for chapter(filename)
Writing user-guide.html for chapter(user-guide)
Writing admin-guide.html for chapter(admin-guide)
Writing bi01.html for bibliography
Writing index.html for book
[service0@yourserver xml]$</screen>
      <para>Verify that the documentation was generated and reflects
      your changes by browsing to <computeroutput>http://<replaceable>yoursite</replaceable>:8000/samplenote/doc</computeroutput></para>
    </sect2>
    <sect2>
      <title>Add the new package to CVS</title>
      <para>Before you do any more work, make sure that your work is
      protected by putting it all into cvs.  The <computeroutput>cvs
      add</computeroutput> command is not recursive, so you'll have to
      traverse the directory tree manually and add as you go.  (<ulink
      url="http://www.piskorski.com/docs/cvs-conventions.html">More on
      CVS</ulink>)</para>
      <screen>[service0@yourserver xml]$ <userinput>cd ..</userinput>
[service0@yourserver doc]$ <userinput>cd ..</userinput>
[service0@yourserver www]$ <userinput>cd ..</userinput>
[service0@yourserver samplenote]$ <userinput>cd ..</userinput>
[service0@yourserver packages]$ <userinput>cvs add samplenote/</userinput>
Directory /cvsroot/service0/packages/samplenote added to the repository
[service0@yourserver packages]$ <userinput>cd samplenote/</userinput>
[service0@yourserver samplenote]$ <userinput>cvs add www</userinput>
Directory /cvsroot/service0/packages/samplenote/www added to the repository
[service0@yourserver samplenote]$ <userinput>cd www</userinput>
[service0@yourserver www]$ <userinput>cvs add doc</userinput>
Directory /cvsroot/service0/packages/samplenote/www/doc added to the repository
[service0@yourserver www]$ <userinput>cd doc</userinput>
[service0@yourserver doc]$ <userinput>cvs add *</userinput>
cvs add: cannot add special file `CVS'; skipping
cvs add: scheduling file `admin-guide.html' for addition
cvs add: scheduling file `bi01.html' for addition
cvs add: scheduling file `data-model.dia' for addition
cvs add: scheduling file `data-model.png' for addition
cvs add: scheduling file `design-config.html' for addition
cvs add: scheduling file `design-data-model.html' for addition
cvs add: scheduling file `design-future.html' for addition
cvs add: scheduling file `design-ui.html' for addition
cvs add: scheduling file `filename.html' for addition
cvs add: scheduling file `index.html' for addition
cvs add: scheduling file `page-map.dia' for addition
cvs add: scheduling file `page-map.png' for addition
cvs add: scheduling file `requirements-cases.html' for addition
cvs add: scheduling file `requirements-introduction.html' for addition
cvs add: scheduling file `requirements-overview.html' for addition
cvs add: scheduling file `requirements.html' for addition
cvs add: scheduling file `sample-data.html' for addition
cvs add: scheduling file `sample.png' for addition
cvs add: scheduling file `user-guide.html' for addition
cvs add: scheduling file `user-interface.dia' for addition
cvs add: scheduling file `user-interface.png' for addition
Directory /cvsroot/service0/packages/samplenote/www/doc/xml added to the repository
cvs add: use 'cvs commit' to add these files permanently
[service0@yourserver doc]$ <userinput>cd xml</userinput>
[service0@yourserver xml]$ <userinput>cvs add Makefile index.xml</userinput>
cvs add: scheduling file `Makefile' for addition
cvs add: scheduling file `index.xml' for addition
cvs add: use 'cvs commit' to add these files permanently
[service0@yourserver xml]$<userinput> cd ../../..</userinput>
[service0@yourserver samplenote]$ <userinput>cvs commit -m "new package"</userinput>
cvs commit: Examining .
cvs commit: Examining www
cvs commit: Examining www/doc
cvs commit: Examining www/doc/xml
RCS file: /cvsroot/service0/packages/samplenote/www/doc/admin-guide.html,v
done
Checking in www/doc/admin-guide.html;
/cvsroot/service0/packages/samplenote/www/doc/admin-guide.html,v  &lt;--  admin-guide.html
initial revision: 1.1
done
<emphasis>(many lines omitted)</emphasis>
[service0@yourserver samplenote]$</screen>
    </sect2>
  </sect1>
